{"remainingRequest":"C:\\Users\\jgardn02\\github\\MaterialDesign\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\jgardn02\\github\\MaterialDesign\\node_modules\\@angular\\material-examples\\esm5\\material-examples.es5.js","dependencies":[{"path":"C:\\Users\\jgardn02\\github\\MaterialDesign\\node_modules\\@angular\\material-examples\\esm5\\material-examples.es5.js","mtime":1530559556425},{"path":"C:\\Users\\jgardn02\\github\\MaterialDesign\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529432912441},{"path":"C:\\Users\\jgardn02\\github\\MaterialDesign\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525974352000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule, Component, Injectable, ElementRef, ViewChild, ChangeDetectionStrategy, ChangeDetectorRef, Host, Inject, NgZone, Input, ViewEncapsulation } from '@angular/core';\nimport { ScrollDispatchModule } from '@angular/cdk/scrolling';\nimport { A11yModule, FocusMonitor } from '@angular/cdk/a11y';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule, FlatTreeControl, NestedTreeControl } from '@angular/cdk/tree';\nimport { MatAutocompleteModule, MatBadgeModule, MatBottomSheetModule, MatButtonModule, MatButtonToggleModule, MatCardModule, MatCheckboxModule, MatChipsModule, MatDatepickerModule, MatDialogModule, MatDividerModule, MatExpansionModule, MatFormFieldModule, MatGridListModule, MatIconModule, MatInputModule, MatListModule, MatMenuModule, MatPaginatorModule, MatProgressBarModule, MatProgressSpinnerModule, MatRadioModule, MatRippleModule, MatSelectModule, MatSidenavModule, MatSliderModule, MatSlideToggleModule, MatSnackBarModule, MatSortModule, MatStepperModule, MatTableModule, MatTabsModule, MatToolbarModule, MatTooltipModule, MatTreeModule, MatBottomSheet, MatBottomSheetRef, MatCalendar, MatDialog, MAT_DIALOG_DATA, MatDialogRef, MatAccordion, MatFormFieldControl, MatIconRegistry, MatSnackBar, MatTableDataSource, MatPaginator, MatSort, MAT_TOOLTIP_DEFAULT_OPTIONS } from '@angular/material';\nimport { FormControl, FormBuilder, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { map, startWith, takeUntil, catchError, switchMap, take } from 'rxjs/operators';\nimport { __extends } from 'tslib';\nimport { DataSource, SelectionModel } from '@angular/cdk/collections';\nimport { BehaviorSubject, of, Subject, Observable, merge } from 'rxjs';\nimport { MatTreeFlatDataSource, MatTreeFlattener, MatTreeNestedDataSource } from '@angular/material/tree';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MomentDateAdapter, MAT_MOMENT_DATE_FORMATS } from '@angular/material-moment-adapter';\nimport * as _rollupMoment from 'moment';\nimport _rollupMoment__default from 'moment';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport '@angular/material/sidenav';\nimport { MediaMatcher } from '@angular/cdk/layout';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { HttpClient } from '@angular/common/http';\nimport { AutofillMonitor } from '@angular/cdk/text-field';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ExampleMaterialModule = /*@__PURE__*/ (function () {\n    function ExampleMaterialModule() {\n    }\n    return ExampleMaterialModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Highlight the first autocomplete option\n */\nvar AutocompleteAutoActiveFirstOptionExample = /*@__PURE__*/ (function () {\n    function AutocompleteAutoActiveFirstOptionExample() {\n        this.myControl = new FormControl();\n        this.options = ['One', 'Two', 'Three'];\n    }\n    /**\n     * @return {?}\n     */\n    AutocompleteAutoActiveFirstOptionExample.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.filteredOptions = this.myControl.valueChanges.pipe(startWith(''), map(function (value) { return _this._filter(value); }));\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    AutocompleteAutoActiveFirstOptionExample.prototype._filter = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            var /** @type {?} */ filterValue = value.toLowerCase();\n            return this.options.filter(function (option) { return option.toLowerCase().indexOf(filterValue) === 0; });\n        };\n    return AutocompleteAutoActiveFirstOptionExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Display value autocomplete\n */\nvar AutocompleteDisplayExample = /*@__PURE__*/ (function () {\n    function AutocompleteDisplayExample() {\n        this.myControl = new FormControl();\n        this.options = [\n            { name: 'Mary' },\n            { name: 'Shelley' },\n            { name: 'Igor' }\n        ];\n    }\n    /**\n     * @return {?}\n     */\n    AutocompleteDisplayExample.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.filteredOptions = this.myControl.valueChanges\n                .pipe(startWith(''), map(function (value) { return typeof value === 'string' ? value : value.name; }), map(function (name) { return name ? _this._filter(name) : _this.options.slice(); }));\n        };\n    /**\n     * @param {?=} user\n     * @return {?}\n     */\n    AutocompleteDisplayExample.prototype.displayFn = /**\n     * @param {?=} user\n     * @return {?}\n     */\n        function (user) {\n            return user ? user.name : undefined;\n        };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    AutocompleteDisplayExample.prototype._filter = /**\n     * @param {?} name\n     * @return {?}\n     */\n        function (name) {\n            var /** @type {?} */ filterValue = name.toLowerCase();\n            return this.options.filter(function (option) { return option.name.toLowerCase().indexOf(filterValue) === 0; });\n        };\n    return AutocompleteDisplayExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Filter autocomplete\n */\nvar AutocompleteFilterExample = /*@__PURE__*/ (function () {\n    function AutocompleteFilterExample() {\n        this.myControl = new FormControl();\n        this.options = ['One', 'Two', 'Three'];\n    }\n    /**\n     * @return {?}\n     */\n    AutocompleteFilterExample.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.filteredOptions = this.myControl.valueChanges\n                .pipe(startWith(''), map(function (value) { return _this._filter(value); }));\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    AutocompleteFilterExample.prototype._filter = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            var /** @type {?} */ filterValue = value.toLowerCase();\n            return this.options.filter(function (option) { return option.toLowerCase().includes(filterValue); });\n        };\n    return AutocompleteFilterExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ _filter = function (opt, value) {\n    var /** @type {?} */ filterValue = value.toLowerCase();\n    return opt.filter(function (item) { return item.toLowerCase().indexOf(filterValue) === 0; });\n};\n/**\n * \\@title Option groups autocomplete\n */\nvar AutocompleteOptgroupExample = /*@__PURE__*/ (function () {\n    function AutocompleteOptgroupExample(fb) {\n        this.fb = fb;\n        this.stateForm = this.fb.group({\n            stateGroup: '',\n        });\n        this.stateGroups = [{\n                letter: 'A',\n                names: ['Alabama', 'Alaska', 'Arizona', 'Arkansas']\n            }, {\n                letter: 'C',\n                names: ['California', 'Colorado', 'Connecticut']\n            }, {\n                letter: 'D',\n                names: ['Delaware']\n            }, {\n                letter: 'F',\n                names: ['Florida']\n            }, {\n                letter: 'G',\n                names: ['Georgia']\n            }, {\n                letter: 'H',\n                names: ['Hawaii']\n            }, {\n                letter: 'I',\n                names: ['Idaho', 'Illinois', 'Indiana', 'Iowa']\n            }, {\n                letter: 'K',\n                names: ['Kansas', 'Kentucky']\n            }, {\n                letter: 'L',\n                names: ['Louisiana']\n            }, {\n                letter: 'M',\n                names: ['Maine', 'Maryland', 'Massachusetts', 'Michigan',\n                    'Minnesota', 'Mississippi', 'Missouri', 'Montana']\n            }, {\n                letter: 'N',\n                names: ['Nebraska', 'Nevada', 'New Hampshire', 'New Jersey',\n                    'New Mexico', 'New York', 'North Carolina', 'North Dakota']\n            }, {\n                letter: 'O',\n                names: ['Ohio', 'Oklahoma', 'Oregon']\n            }, {\n                letter: 'P',\n                names: ['Pennsylvania']\n            }, {\n                letter: 'R',\n                names: ['Rhode Island']\n            }, {\n                letter: 'S',\n                names: ['South Carolina', 'South Dakota']\n            }, {\n                letter: 'T',\n                names: ['Tennessee', 'Texas']\n            }, {\n                letter: 'U',\n                names: ['Utah']\n            }, {\n                letter: 'V',\n                names: ['Vermont', 'Virginia']\n            }, {\n                letter: 'W',\n                names: ['Washington', 'West Virginia', 'Wisconsin', 'Wyoming']\n            }];\n    }\n    /**\n     * @return {?}\n     */\n    AutocompleteOptgroupExample.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.stateGroupOptions = /** @type {?} */ ((this.stateForm.get('stateGroup'))).valueChanges.pipe(startWith(''), map(function (value) { return _this._filterGroup(value); }));\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    AutocompleteOptgroupExample.prototype._filterGroup = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            if (value) {\n                return this.stateGroups\n                    .map(function (group) { return ({ letter: group.letter, names: _filter(group.names, value) }); })\n                    .filter(function (group) { return group.names.length > 0; });\n            }\n            return this.stateGroups;\n        };\n    return AutocompleteOptgroupExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Autocomplete overview\n */\nvar AutocompleteOverviewExample = /*@__PURE__*/ (function () {\n    function AutocompleteOverviewExample() {\n        var _this = this;\n        this.stateCtrl = new FormControl();\n        this.states = [\n            {\n                name: 'Arkansas',\n                population: '2.978M',\n                // https://commons.wikimedia.org/wiki/File:Flag_of_Arkansas.svg\n                flag: 'https://upload.wikimedia.org/wikipedia/commons/9/9d/Flag_of_Arkansas.svg'\n            },\n            {\n                name: 'California',\n                population: '39.14M',\n                // https://commons.wikimedia.org/wiki/File:Flag_of_California.svg\n                flag: 'https://upload.wikimedia.org/wikipedia/commons/0/01/Flag_of_California.svg'\n            },\n            {\n                name: 'Florida',\n                population: '20.27M',\n                // https://commons.wikimedia.org/wiki/File:Flag_of_Florida.svg\n                flag: 'https://upload.wikimedia.org/wikipedia/commons/f/f7/Flag_of_Florida.svg'\n            },\n            {\n                name: 'Texas',\n                population: '27.47M',\n                // https://commons.wikimedia.org/wiki/File:Flag_of_Texas.svg\n                flag: 'https://upload.wikimedia.org/wikipedia/commons/f/f7/Flag_of_Texas.svg'\n            }\n        ];\n        this.filteredStates = this.stateCtrl.valueChanges\n            .pipe(startWith(''), map(function (state$$1) { return state$$1 ? _this._filterStates(state$$1) : _this.states.slice(); }));\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    AutocompleteOverviewExample.prototype._filterStates = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            var /** @type {?} */ filterValue = value.toLowerCase();\n            return this.states.filter(function (state$$1) { return state$$1.name.toLowerCase().indexOf(filterValue) === 0; });\n        };\n    return AutocompleteOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Simple autocomplete\n */\nvar AutocompleteSimpleExample = /*@__PURE__*/ (function () {\n    function AutocompleteSimpleExample() {\n        this.myControl = new FormControl();\n        this.options = ['One', 'Two', 'Three'];\n    }\n    return AutocompleteSimpleExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Badge overview\n */\nvar BadgeOverviewExample = /*@__PURE__*/ (function () {\n    function BadgeOverviewExample() {\n    }\n    return BadgeOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Bottom Sheet Overview\n */\nvar BottomSheetOverviewExample = /*@__PURE__*/ (function () {\n    function BottomSheetOverviewExample(bottomSheet) {\n        this.bottomSheet = bottomSheet;\n    }\n    /**\n     * @return {?}\n     */\n    BottomSheetOverviewExample.prototype.openBottomSheet = /**\n     * @return {?}\n     */\n        function () {\n            this.bottomSheet.open(BottomSheetOverviewExampleSheet);\n        };\n    return BottomSheetOverviewExample;\n}());\nvar BottomSheetOverviewExampleSheet = /*@__PURE__*/ (function () {\n    function BottomSheetOverviewExampleSheet(bottomSheetRef) {\n        this.bottomSheetRef = bottomSheetRef;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    BottomSheetOverviewExampleSheet.prototype.openLink = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.bottomSheetRef.dismiss();\n            event.preventDefault();\n        };\n    return BottomSheetOverviewExampleSheet;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic buttons\n */\nvar ButtonOverviewExample = /*@__PURE__*/ (function () {\n    function ButtonOverviewExample() {\n    }\n    return ButtonOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Exclusive selection\n */\nvar ButtonToggleExclusiveExample = /*@__PURE__*/ (function () {\n    function ButtonToggleExclusiveExample() {\n    }\n    return ButtonToggleExclusiveExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic button-toggles\n */\nvar ButtonToggleOverviewExample = /*@__PURE__*/ (function () {\n    function ButtonToggleOverviewExample() {\n    }\n    return ButtonToggleOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Button varieties\n */\nvar ButtonTypesExample = /*@__PURE__*/ (function () {\n    function ButtonTypesExample() {\n    }\n    return ButtonTypesExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Card with multiple sections\n */\nvar CardFancyExample = /*@__PURE__*/ (function () {\n    function CardFancyExample() {\n    }\n    return CardFancyExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic cards\n */\nvar CardOverviewExample = /*@__PURE__*/ (function () {\n    function CardOverviewExample() {\n    }\n    return CardOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ ELEMENT_DATA = [\n    { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n    { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n    { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n    { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n    { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n    { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n    { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n    { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n    { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n    { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n];\n/**\n * \\@title Basic use of `<cdk-table>` (uses display flex)\n */\nvar CdkTableBasicFlexExample = /*@__PURE__*/ (function () {\n    function CdkTableBasicFlexExample() {\n        this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n        this.dataSource = new ExampleDataSource();\n    }\n    return CdkTableBasicFlexExample;\n}());\n/**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */\nvar /**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */ ExampleDataSource = /*@__PURE__*/ (function (_super) {\n    __extends(ExampleDataSource, _super);\n    function ExampleDataSource() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Stream of data that is provided to the table.\n         */\n        _this.data = new BehaviorSubject(ELEMENT_DATA);\n        return _this;\n    }\n    /** Connect function called by the table to retrieve one stream containing the data to render. */\n    /**\n     * Connect function called by the table to retrieve one stream containing the data to render.\n     * @return {?}\n     */\n    ExampleDataSource.prototype.connect = /**\n     * Connect function called by the table to retrieve one stream containing the data to render.\n     * @return {?}\n     */\n        function () {\n            return this.data;\n        };\n    /**\n     * @return {?}\n     */\n    ExampleDataSource.prototype.disconnect = /**\n     * @return {?}\n     */\n        function () { };\n    return ExampleDataSource;\n}(DataSource));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ ELEMENT_DATA$1 = [\n    { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n    { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n    { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n    { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n    { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n    { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n    { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n    { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n    { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n    { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n];\n/**\n * \\@title Basic CDK data-table\n */\nvar CdkTableBasicExample = /*@__PURE__*/ (function () {\n    function CdkTableBasicExample() {\n        this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n        this.dataSource = new ExampleDataSource$1();\n    }\n    return CdkTableBasicExample;\n}());\n/**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */\nvar /**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */ ExampleDataSource$1 = (function (_super) {\n    __extends(ExampleDataSource, _super);\n    function ExampleDataSource() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Stream of data that is provided to the table.\n         */\n        _this.data = new BehaviorSubject(ELEMENT_DATA$1);\n        return _this;\n    }\n    /** Connect function called by the table to retrieve one stream containing the data to render. */\n    /**\n     * Connect function called by the table to retrieve one stream containing the data to render.\n     * @return {?}\n     */\n    ExampleDataSource.prototype.connect = /**\n     * Connect function called by the table to retrieve one stream containing the data to render.\n     * @return {?}\n     */\n        function () {\n            return this.data;\n        };\n    /**\n     * @return {?}\n     */\n    ExampleDataSource.prototype.disconnect = /**\n     * @return {?}\n     */\n        function () { };\n    return ExampleDataSource;\n}(DataSource));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * File node data with nested structure.\n * Each node has a filename, and a type or a list of children.\n */\nvar /**\n * File node data with nested structure.\n * Each node has a filename, and a type or a list of children.\n */ FileNode = /*@__PURE__*/ (function () {\n    function FileNode() {\n    }\n    return FileNode;\n}());\n/**\n * Flat node with expandable and level information\n */\nvar /**\n * Flat node with expandable and level information\n */ FileFlatNode = /*@__PURE__*/ (function () {\n    function FileFlatNode(expandable, filename, level, type) {\n        this.expandable = expandable;\n        this.filename = filename;\n        this.level = level;\n        this.type = type;\n    }\n    return FileFlatNode;\n}());\n/**\n * The file structure tree data in string. The data could be parsed into a Json object\n */\nvar /** @type {?} */ TREE_DATA = JSON.stringify({\n    Applications: {\n        Calendar: 'app',\n        Chrome: 'app',\n        Webstorm: 'app'\n    },\n    Documents: {\n        angular: {\n            src: {\n                compiler: 'ts',\n                core: 'ts'\n            }\n        },\n        material2: {\n            src: {\n                button: 'ts',\n                checkbox: 'ts',\n                input: 'ts'\n            }\n        }\n    },\n    Downloads: {\n        October: 'pdf',\n        November: 'pdf',\n        Tutorial: 'html'\n    },\n    Pictures: {\n        'Photo Booth Library': {\n            Contents: 'dir',\n            Pictures: 'dir'\n        },\n        Sun: 'png',\n        Woods: 'jpg'\n    }\n});\n/**\n * File database, it can build a tree structured Json object from string.\n * Each node in Json object represents a file or a directory. For a file, it has filename and type.\n * For a directory, it has filename and children (a list of files or directories).\n * The input will be a json object string, and the output is a list of `FileNode` with nested\n * structure.\n */\nvar FileDatabase = /*@__PURE__*/ (function () {\n    function FileDatabase() {\n        this.dataChange = new BehaviorSubject([]);\n        this.initialize();\n    }\n    Object.defineProperty(FileDatabase.prototype, \"data\", {\n        get: /**\n         * @return {?}\n         */ function () { return this.dataChange.value; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FileDatabase.prototype.initialize = /**\n     * @return {?}\n     */\n        function () {\n            // Parse the string to json object.\n            var /** @type {?} */ dataObject = JSON.parse(TREE_DATA);\n            // Build the tree nodes from Json object. The result is a list of `FileNode` with nested\n            //     file node as children.\n            var /** @type {?} */ data = this.buildFileTree(dataObject, 0);\n            // Notify the change.\n            this.dataChange.next(data);\n        };\n    /**\n     * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n     * The return value is the list of `FileNode`.\n     */\n    /**\n     * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n     * The return value is the list of `FileNode`.\n     * @param {?} obj\n     * @param {?} level\n     * @return {?}\n     */\n    FileDatabase.prototype.buildFileTree = /**\n     * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n     * The return value is the list of `FileNode`.\n     * @param {?} obj\n     * @param {?} level\n     * @return {?}\n     */\n        function (obj, level) {\n            var _this = this;\n            return Object.keys(obj).reduce(function (accumulator, key) {\n                var /** @type {?} */ value = obj[key];\n                var /** @type {?} */ node = new FileNode();\n                node.filename = key;\n                if (value != null) {\n                    if (typeof value === 'object') {\n                        node.children = _this.buildFileTree(value, level + 1);\n                    }\n                    else {\n                        node.type = value;\n                    }\n                }\n                return accumulator.concat(node);\n            }, []);\n        };\n    return FileDatabase;\n}());\n/**\n * \\@title Tree with flat nodes\n */\nvar CdkTreeFlatExample = /*@__PURE__*/ (function () {\n    function CdkTreeFlatExample(database) {\n        var _this = this;\n        this.hasChild = function (_, _nodeData) { return _nodeData.expandable; };\n        this.transformer = function (node, level) {\n            return new FileFlatNode(!!node.children, node.filename, level, node.type);\n        };\n        this._getLevel = function (node) { return node.level; };\n        this._isExpandable = function (node) { return node.expandable; };\n        this._getChildren = function (node) { return of(node.children); };\n        this.treeFlattener = new MatTreeFlattener(this.transformer, this._getLevel, this._isExpandable, this._getChildren);\n        this.treeControl = new FlatTreeControl(this._getLevel, this._isExpandable);\n        this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        database.dataChange.subscribe(function (data) {\n            _this.dataSource.data = data;\n        });\n    }\n    return CdkTreeFlatExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Json node data with nested structure. Each node has a filename and a value or a list of children\n */\nvar /**\n * Json node data with nested structure. Each node has a filename and a value or a list of children\n */ FileNode$1 = (function () {\n    function FileNode() {\n    }\n    return FileNode;\n}());\n/**\n * The Json tree data in string. The data could be parsed into Json object\n */\nvar /** @type {?} */ TREE_DATA$1 = JSON.stringify({\n    Applications: {\n        Calendar: 'app',\n        Chrome: 'app',\n        Webstorm: 'app'\n    },\n    Documents: {\n        angular: {\n            src: {\n                compiler: 'ts',\n                core: 'ts'\n            }\n        },\n        material2: {\n            src: {\n                button: 'ts',\n                checkbox: 'ts',\n                input: 'ts'\n            }\n        }\n    },\n    Downloads: {\n        October: 'pdf',\n        November: 'pdf',\n        Tutorial: 'html'\n    },\n    Pictures: {\n        'Photo Booth Library': {\n            Contents: 'dir',\n            Pictures: 'dir'\n        },\n        Sun: 'png',\n        Woods: 'jpg'\n    }\n});\n/**\n * File database, it can build a tree structured Json object from string.\n * Each node in Json object represents a file or a directory. For a file, it has filename and type.\n * For a directory, it has filename and children (a list of files or directories).\n * The input will be a json object string, and the output is a list of `FileNode` with nested\n * structure.\n */\nvar FileDatabase$1 = (function () {\n    function FileDatabase() {\n        this.dataChange = new BehaviorSubject([]);\n        this.initialize();\n    }\n    Object.defineProperty(FileDatabase.prototype, \"data\", {\n        get: /**\n         * @return {?}\n         */ function () { return this.dataChange.value; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FileDatabase.prototype.initialize = /**\n     * @return {?}\n     */\n        function () {\n            // Parse the string to json object.\n            var /** @type {?} */ dataObject = JSON.parse(TREE_DATA$1);\n            // Build the tree nodes from Json object. The result is a list of `FileNode` with nested\n            //     file node as children.\n            var /** @type {?} */ data = this.buildFileTree(dataObject, 0);\n            // Notify the change.\n            this.dataChange.next(data);\n        };\n    /**\n     * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n     * The return value is the list of `FileNode`.\n     */\n    /**\n     * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n     * The return value is the list of `FileNode`.\n     * @param {?} obj\n     * @param {?} level\n     * @return {?}\n     */\n    FileDatabase.prototype.buildFileTree = /**\n     * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n     * The return value is the list of `FileNode`.\n     * @param {?} obj\n     * @param {?} level\n     * @return {?}\n     */\n        function (obj, level) {\n            var _this = this;\n            return Object.keys(obj).reduce(function (accumulator, key) {\n                var /** @type {?} */ value = obj[key];\n                var /** @type {?} */ node = new FileNode$1();\n                node.filename = key;\n                if (value != null) {\n                    if (typeof value === 'object') {\n                        node.children = _this.buildFileTree(value, level + 1);\n                    }\n                    else {\n                        node.type = value;\n                    }\n                }\n                return accumulator.concat(node);\n            }, []);\n        };\n    return FileDatabase;\n}());\n/**\n * \\@title Tree with nested nodes\n */\nvar CdkTreeNestedExample = /*@__PURE__*/ (function () {\n    function CdkTreeNestedExample(database) {\n        var _this = this;\n        this.hasNestedChild = function (_, nodeData) { return !nodeData.type; };\n        this._getChildren = function (node) { return of(node.children); };\n        this.nestedTreeControl = new NestedTreeControl(this._getChildren);\n        this.nestedDataSource = new MatTreeNestedDataSource();\n        database.dataChange.subscribe(function (data) { return _this.nestedDataSource.data = data; });\n    }\n    return CdkTreeNestedExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Configurable checkbox\n */\nvar CheckboxConfigurableExample = /*@__PURE__*/ (function () {\n    function CheckboxConfigurableExample() {\n        this.checked = false;\n        this.indeterminate = false;\n        this.labelPosition = 'after';\n        this.disabled = false;\n    }\n    return CheckboxConfigurableExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic checkboxes\n */\nvar CheckboxOverviewExample = /*@__PURE__*/ (function () {\n    function CheckboxOverviewExample() {\n    }\n    return CheckboxOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Chips Autocomplete\n */\nvar ChipsAutocompleteExample = /*@__PURE__*/ (function () {\n    function ChipsAutocompleteExample() {\n        var _this = this;\n        this.visible = true;\n        this.selectable = true;\n        this.removable = true;\n        this.addOnBlur = false;\n        this.separatorKeysCodes = [ENTER, COMMA];\n        this.fruitCtrl = new FormControl();\n        this.fruits = ['Lemon'];\n        this.allFruits = ['Apple', 'Lemon', 'Lime', 'Orange', 'Strawberry'];\n        this.filteredFruits = this.fruitCtrl.valueChanges.pipe(startWith(null), map(function (fruit) { return fruit ? _this._filter(fruit) : _this.allFruits.slice(); }));\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ChipsAutocompleteExample.prototype.add = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            var /** @type {?} */ input = event.input;\n            var /** @type {?} */ value = event.value;\n            // Add our fruit\n            if ((value || '').trim()) {\n                this.fruits.push(value.trim());\n            }\n            // Reset the input value\n            if (input) {\n                input.value = '';\n            }\n            this.fruitCtrl.setValue(null);\n        };\n    /**\n     * @param {?} fruit\n     * @return {?}\n     */\n    ChipsAutocompleteExample.prototype.remove = /**\n     * @param {?} fruit\n     * @return {?}\n     */\n        function (fruit) {\n            var /** @type {?} */ index = this.fruits.indexOf(fruit);\n            if (index >= 0) {\n                this.fruits.splice(index, 1);\n            }\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ChipsAutocompleteExample.prototype.selected = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.fruits.push(event.option.viewValue);\n            this.fruitInput.nativeElement.value = '';\n            this.fruitCtrl.setValue(null);\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ChipsAutocompleteExample.prototype._filter = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            var /** @type {?} */ filterValue = value.toLowerCase();\n            return this.allFruits.filter(function (fruit) { return fruit.toLowerCase().indexOf(filterValue) === 0; });\n        };\n    return ChipsAutocompleteExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Chips with input\n */\nvar ChipsInputExample = /*@__PURE__*/ (function () {\n    function ChipsInputExample() {\n        this.visible = true;\n        this.selectable = true;\n        this.removable = true;\n        this.addOnBlur = true;\n        this.separatorKeysCodes = [ENTER, COMMA];\n        this.fruits = [\n            { name: 'Lemon' },\n            { name: 'Lime' },\n            { name: 'Apple' },\n        ];\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ChipsInputExample.prototype.add = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            var /** @type {?} */ input = event.input;\n            var /** @type {?} */ value = event.value;\n            // Add our fruit\n            if ((value || '').trim()) {\n                this.fruits.push({ name: value.trim() });\n            }\n            // Reset the input value\n            if (input) {\n                input.value = '';\n            }\n        };\n    /**\n     * @param {?} fruit\n     * @return {?}\n     */\n    ChipsInputExample.prototype.remove = /**\n     * @param {?} fruit\n     * @return {?}\n     */\n        function (fruit) {\n            var /** @type {?} */ index = this.fruits.indexOf(fruit);\n            if (index >= 0) {\n                this.fruits.splice(index, 1);\n            }\n        };\n    return ChipsInputExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic chips\n */\nvar ChipsOverviewExample = /*@__PURE__*/ (function () {\n    function ChipsOverviewExample() {\n    }\n    return ChipsOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Stacked chips\n */\nvar ChipsStackedExample = /*@__PURE__*/ (function () {\n    function ChipsStackedExample() {\n        this.availableColors = [\n            { name: 'none', color: undefined },\n            { name: 'Primary', color: 'primary' },\n            { name: 'Accent', color: 'accent' },\n            { name: 'Warn', color: 'warn' }\n        ];\n    }\n    return ChipsStackedExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Datepicker open method\n */\nvar DatepickerApiExample = /*@__PURE__*/ (function () {\n    function DatepickerApiExample() {\n    }\n    return DatepickerApiExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Datepicker palette colors\n */\nvar DatepickerColorExample = /*@__PURE__*/ (function () {\n    function DatepickerColorExample() {\n    }\n    return DatepickerColorExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Datepicker with custom calendar header\n */\nvar DatepickerCustomHeaderExample = /*@__PURE__*/ (function () {\n    function DatepickerCustomHeaderExample() {\n        this.exampleHeader = ExampleHeader;\n    }\n    return DatepickerCustomHeaderExample;\n}());\n/**\n * Custom header component for datepicker.\n * @template D\n */\nvar ExampleHeader = /*@__PURE__*/ (function () {\n    function ExampleHeader(calendar, dateAdapter, dateFormats, cdr) {\n        this.calendar = calendar;\n        this.dateAdapter = dateAdapter;\n        this.dateFormats = dateFormats;\n        this.destroyed = new Subject();\n        calendar.stateChanges\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(function () { return cdr.markForCheck(); });\n    }\n    /**\n     * @return {?}\n     */\n    ExampleHeader.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.destroyed.next();\n            this.destroyed.complete();\n        };\n    Object.defineProperty(ExampleHeader.prototype, \"periodLabel\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.dateAdapter\n                .format(this.calendar.activeDate, this.dateFormats.display.monthYearLabel)\n                .toLocaleUpperCase();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} mode\n     * @return {?}\n     */\n    ExampleHeader.prototype.previousClicked = /**\n     * @param {?} mode\n     * @return {?}\n     */\n        function (mode) {\n            this.calendar.activeDate = mode === 'month' ?\n                this.dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n                this.dateAdapter.addCalendarYears(this.calendar.activeDate, -1);\n        };\n    /**\n     * @param {?} mode\n     * @return {?}\n     */\n    ExampleHeader.prototype.nextClicked = /**\n     * @param {?} mode\n     * @return {?}\n     */\n        function (mode) {\n            this.calendar.activeDate = mode === 'month' ?\n                this.dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n                this.dateAdapter.addCalendarYears(this.calendar.activeDate, 1);\n        };\n    return ExampleHeader;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Datepicker with custom icon\n */\nvar DatepickerCustomIconExample = /*@__PURE__*/ (function () {\n    function DatepickerCustomIconExample() {\n    }\n    return DatepickerCustomIconExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Disabled datepicker\n */\nvar DatepickerDisabledExample = /*@__PURE__*/ (function () {\n    function DatepickerDisabledExample() {\n    }\n    return DatepickerDisabledExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Datepicker input and change events\n */\nvar DatepickerEventsExample = /*@__PURE__*/ (function () {\n    function DatepickerEventsExample() {\n        this.events = [];\n    }\n    /**\n     * @param {?} type\n     * @param {?} event\n     * @return {?}\n     */\n    DatepickerEventsExample.prototype.addEvent = /**\n     * @param {?} type\n     * @param {?} event\n     * @return {?}\n     */\n        function (type, event) {\n            this.events.push(type + \": \" + event.value);\n        };\n    return DatepickerEventsExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Datepicker with filter validation\n */\nvar DatepickerFilterExample = /*@__PURE__*/ (function () {\n    function DatepickerFilterExample() {\n        this.myFilter = function (d) {\n            var /** @type {?} */ day = d.getDay();\n            // Prevent Saturday and Sunday from being selected.\n            return day !== 0 && day !== 6;\n        };\n    }\n    return DatepickerFilterExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ moment = _rollupMoment__default || _rollupMoment;\n// See the Moment.js docs for the meaning of these formats:\n// https://momentjs.com/docs/#/displaying/format/\nvar /** @type {?} */ MY_FORMATS = {\n    parse: {\n        dateInput: 'LL',\n    },\n    display: {\n        dateInput: 'LL',\n        monthYearLabel: 'MMM YYYY',\n        dateA11yLabel: 'LL',\n        monthYearA11yLabel: 'MMMM YYYY',\n    },\n};\n/**\n * \\@title Datepicker with custom formats\n */\nvar DatepickerFormatsExample = /*@__PURE__*/ (function () {\n    function DatepickerFormatsExample() {\n        this.date = new FormControl(moment());\n    }\n    return DatepickerFormatsExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ɵ0 = MAT_MOMENT_DATE_FORMATS;\n/**\n * \\@title Datepicker with different locale\n */\nvar DatepickerLocaleExample = /*@__PURE__*/ (function () {\n    function DatepickerLocaleExample(adapter) {\n        this.adapter = adapter;\n    }\n    /**\n     * @return {?}\n     */\n    DatepickerLocaleExample.prototype.french = /**\n     * @return {?}\n     */\n        function () {\n            this.adapter.setLocale('fr');\n        };\n    return DatepickerLocaleExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Datepicker with min & max validation\n */\nvar DatepickerMinMaxExample = /*@__PURE__*/ (function () {\n    function DatepickerMinMaxExample() {\n        this.minDate = new Date(2000, 0, 1);\n        this.maxDate = new Date(2020, 0, 1);\n    }\n    return DatepickerMinMaxExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ moment$1 = _rollupMoment__default || _rollupMoment;\nvar ɵ0$1 = MAT_MOMENT_DATE_FORMATS;\n/**\n * \\@title Datepicker that uses Moment.js dates\n */\nvar DatepickerMomentExample = /*@__PURE__*/ (function () {\n    function DatepickerMomentExample() {\n        // Datepicker takes `Moment` objects instead of `Date` objects.\n        this.date = new FormControl(moment$1([2017, 0, 1]));\n    }\n    return DatepickerMomentExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic datepicker\n */\nvar DatepickerOverviewExample = /*@__PURE__*/ (function () {\n    function DatepickerOverviewExample() {\n    }\n    return DatepickerOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Datepicker start date\n */\nvar DatepickerStartViewExample = /*@__PURE__*/ (function () {\n    function DatepickerStartViewExample() {\n        this.startDate = new Date(1990, 0, 1);\n    }\n    return DatepickerStartViewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Datepicker touch UI\n */\nvar DatepickerTouchExample = /*@__PURE__*/ (function () {\n    function DatepickerTouchExample() {\n    }\n    return DatepickerTouchExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Datepicker selected value\n */\nvar DatepickerValueExample = /*@__PURE__*/ (function () {\n    function DatepickerValueExample() {\n        this.date = new FormControl(new Date());\n        this.serializedDate = new FormControl((new Date()).toISOString());\n    }\n    return DatepickerValueExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ moment$2 = _rollupMoment__default || _rollupMoment;\n// See the Moment.js docs for the meaning of these formats:\n// https://momentjs.com/docs/#/displaying/format/\nvar /** @type {?} */ MY_FORMATS$1 = {\n    parse: {\n        dateInput: 'MM/YYYY',\n    },\n    display: {\n        dateInput: 'MM/YYYY',\n        monthYearLabel: 'MMM YYYY',\n        dateA11yLabel: 'LL',\n        monthYearA11yLabel: 'MMMM YYYY',\n    },\n};\n/**\n * \\@title Datepicker emulating a Year and month picker\n */\nvar DatepickerViewsSelectionExample = /*@__PURE__*/ (function () {\n    function DatepickerViewsSelectionExample() {\n        this.date = new FormControl(moment$2());\n    }\n    /**\n     * @param {?} normalizedYear\n     * @return {?}\n     */\n    DatepickerViewsSelectionExample.prototype.chosenYearHandler = /**\n     * @param {?} normalizedYear\n     * @return {?}\n     */\n        function (normalizedYear) {\n            var /** @type {?} */ ctrlValue = this.date.value;\n            ctrlValue.year(normalizedYear.year());\n            this.date.setValue(ctrlValue);\n        };\n    /**\n     * @param {?} normlizedMonth\n     * @param {?} datepicker\n     * @return {?}\n     */\n    DatepickerViewsSelectionExample.prototype.chosenMonthHandler = /**\n     * @param {?} normlizedMonth\n     * @param {?} datepicker\n     * @return {?}\n     */\n        function (normlizedMonth, datepicker) {\n            var /** @type {?} */ ctrlValue = this.date.value;\n            ctrlValue.month(normlizedMonth.month());\n            this.date.setValue(ctrlValue);\n            datepicker.close();\n        };\n    return DatepickerViewsSelectionExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Dialog with header, scrollable content and actions\n */\nvar DialogContentExample = /*@__PURE__*/ (function () {\n    function DialogContentExample(dialog) {\n        this.dialog = dialog;\n    }\n    /**\n     * @return {?}\n     */\n    DialogContentExample.prototype.openDialog = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ dialogRef = this.dialog.open(DialogContentExampleDialog, {\n                height: '350px'\n            });\n            dialogRef.afterClosed().subscribe(function (result) {\n                console.log(\"Dialog result: \" + result);\n            });\n        };\n    return DialogContentExample;\n}());\nvar DialogContentExampleDialog = /*@__PURE__*/ (function () {\n    function DialogContentExampleDialog() {\n    }\n    return DialogContentExampleDialog;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Injecting data when opening a dialog\n */\nvar DialogDataExample = /*@__PURE__*/ (function () {\n    function DialogDataExample(dialog) {\n        this.dialog = dialog;\n    }\n    /**\n     * @return {?}\n     */\n    DialogDataExample.prototype.openDialog = /**\n     * @return {?}\n     */\n        function () {\n            this.dialog.open(DialogDataExampleDialog, {\n                data: {\n                    animal: 'panda'\n                }\n            });\n        };\n    return DialogDataExample;\n}());\nvar DialogDataExampleDialog = /*@__PURE__*/ (function () {\n    function DialogDataExampleDialog(data) {\n        this.data = data;\n    }\n    return DialogDataExampleDialog;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Dialog elements\n */\nvar DialogElementsExample = /*@__PURE__*/ (function () {\n    function DialogElementsExample(dialog) {\n        this.dialog = dialog;\n    }\n    /**\n     * @return {?}\n     */\n    DialogElementsExample.prototype.openDialog = /**\n     * @return {?}\n     */\n        function () {\n            this.dialog.open(DialogElementsExampleDialog);\n        };\n    return DialogElementsExample;\n}());\nvar DialogElementsExampleDialog = /*@__PURE__*/ (function () {\n    function DialogElementsExampleDialog() {\n    }\n    return DialogElementsExampleDialog;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Dialog Overview\n */\nvar DialogOverviewExample = /*@__PURE__*/ (function () {\n    function DialogOverviewExample(dialog) {\n        this.dialog = dialog;\n    }\n    /**\n     * @return {?}\n     */\n    DialogOverviewExample.prototype.openDialog = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            var /** @type {?} */ dialogRef = this.dialog.open(DialogOverviewExampleDialog, {\n                width: '250px',\n                data: { name: this.name, animal: this.animal }\n            });\n            dialogRef.afterClosed().subscribe(function (result) {\n                console.log('The dialog was closed');\n                _this.animal = result;\n            });\n        };\n    return DialogOverviewExample;\n}());\nvar DialogOverviewExampleDialog = /*@__PURE__*/ (function () {\n    function DialogOverviewExampleDialog(dialogRef, data) {\n        this.dialogRef = dialogRef;\n        this.data = data;\n    }\n    /**\n     * @return {?}\n     */\n    DialogOverviewExampleDialog.prototype.onNoClick = /**\n     * @return {?}\n     */\n        function () {\n            this.dialogRef.close();\n        };\n    return DialogOverviewExampleDialog;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic divider\n */\nvar DividerOverviewExample = /*@__PURE__*/ (function () {\n    function DividerOverviewExample() {\n    }\n    return DividerOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Elevation CSS classes\n */\nvar ElevationOverviewExample = /*@__PURE__*/ (function () {\n    function ElevationOverviewExample() {\n        this.isActive = false;\n    }\n    return ElevationOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Accordion with expand/collapse all toggles\n */\nvar ExpansionExpandCollapseAllExample = /*@__PURE__*/ (function () {\n    function ExpansionExpandCollapseAllExample() {\n    }\n    return ExpansionExpandCollapseAllExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic expansion panel\n */\nvar ExpansionOverviewExample = /*@__PURE__*/ (function () {\n    function ExpansionOverviewExample() {\n        this.panelOpenState = false;\n    }\n    return ExpansionOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Expansion panel as accordion\n */\nvar ExpansionStepsExample = /*@__PURE__*/ (function () {\n    function ExpansionStepsExample() {\n        this.step = 0;\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    ExpansionStepsExample.prototype.setStep = /**\n     * @param {?} index\n     * @return {?}\n     */\n        function (index) {\n            this.step = index;\n        };\n    /**\n     * @return {?}\n     */\n    ExpansionStepsExample.prototype.nextStep = /**\n     * @return {?}\n     */\n        function () {\n            this.step++;\n        };\n    /**\n     * @return {?}\n     */\n    ExpansionStepsExample.prototype.prevStep = /**\n     * @return {?}\n     */\n        function () {\n            this.step--;\n        };\n    return ExpansionStepsExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Monitoring focus with FocusMonitor\n */\nvar FocusMonitorDirectivesExample = /*@__PURE__*/ (function () {\n    function FocusMonitorDirectivesExample(ngZone, cdr) {\n        this.ngZone = ngZone;\n        this.cdr = cdr;\n        this.elementOrigin = this.formatOrigin(null);\n        this.subtreeOrigin = this.formatOrigin(null);\n    }\n    /**\n     * @param {?} origin\n     * @return {?}\n     */\n    FocusMonitorDirectivesExample.prototype.formatOrigin = /**\n     * @param {?} origin\n     * @return {?}\n     */\n        function (origin) {\n            return origin ? origin + ' focused' : 'blurred';\n        };\n    // Workaround for the fact that (cdkFocusChange) emits outside NgZone.\n    /**\n     * @return {?}\n     */\n    FocusMonitorDirectivesExample.prototype.markForCheck = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.ngZone.run(function () { return _this.cdr.markForCheck(); });\n        };\n    return FocusMonitorDirectivesExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Focusing with a specific FocusOrigin\n */\nvar FocusMonitorFocusViaExample = /*@__PURE__*/ (function () {\n    function FocusMonitorFocusViaExample(focusMonitor, cdr, ngZone) {\n        this.focusMonitor = focusMonitor;\n        this.cdr = cdr;\n        this.ngZone = ngZone;\n        this.origin = this.formatOrigin(null);\n    }\n    /**\n     * @return {?}\n     */\n    FocusMonitorFocusViaExample.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.focusMonitor.monitor(this.monitoredEl.nativeElement)\n                .subscribe(function (origin) {\n                return _this.ngZone.run(function () {\n                    _this.origin = _this.formatOrigin(origin);\n                    _this.cdr.markForCheck();\n                });\n            });\n        };\n    /**\n     * @return {?}\n     */\n    FocusMonitorFocusViaExample.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.focusMonitor.stopMonitoring(this.monitoredEl.nativeElement);\n        };\n    /**\n     * @param {?} origin\n     * @return {?}\n     */\n    FocusMonitorFocusViaExample.prototype.formatOrigin = /**\n     * @param {?} origin\n     * @return {?}\n     */\n        function (origin) {\n            return origin ? origin + ' focused' : 'blurred';\n        };\n    return FocusMonitorFocusViaExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Monitoring focus with FocusMonitor\n */\nvar FocusMonitorOverviewExample = /*@__PURE__*/ (function () {\n    function FocusMonitorOverviewExample(focusMonitor, cdr, ngZone) {\n        this.focusMonitor = focusMonitor;\n        this.cdr = cdr;\n        this.ngZone = ngZone;\n        this.elementOrigin = this.formatOrigin(null);\n        this.subtreeOrigin = this.formatOrigin(null);\n    }\n    /**\n     * @return {?}\n     */\n    FocusMonitorOverviewExample.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.focusMonitor.monitor(this.element.nativeElement)\n                .subscribe(function (origin) {\n                return _this.ngZone.run(function () {\n                    _this.elementOrigin = _this.formatOrigin(origin);\n                    _this.cdr.markForCheck();\n                });\n            });\n            this.focusMonitor.monitor(this.subtree.nativeElement, true)\n                .subscribe(function (origin) {\n                return _this.ngZone.run(function () {\n                    _this.subtreeOrigin = _this.formatOrigin(origin);\n                    _this.cdr.markForCheck();\n                });\n            });\n        };\n    /**\n     * @return {?}\n     */\n    FocusMonitorOverviewExample.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.focusMonitor.stopMonitoring(this.element.nativeElement);\n            this.focusMonitor.stopMonitoring(this.subtree.nativeElement);\n        };\n    /**\n     * @param {?} origin\n     * @return {?}\n     */\n    FocusMonitorOverviewExample.prototype.formatOrigin = /**\n     * @param {?} origin\n     * @return {?}\n     */\n        function (origin) {\n            return origin ? origin + ' focused' : 'blurred';\n        };\n    return FocusMonitorOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Form field appearance variants\n */\nvar FormFieldAppearanceExample = /*@__PURE__*/ (function () {\n    function FormFieldAppearanceExample() {\n    }\n    return FormFieldAppearanceExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Data structure for holding telephone number.\n */\nvar /**\n * Data structure for holding telephone number.\n */ MyTel = /*@__PURE__*/ (function () {\n    function MyTel(area, exchange, subscriber) {\n        this.area = area;\n        this.exchange = exchange;\n        this.subscriber = subscriber;\n    }\n    return MyTel;\n}());\n/**\n * Custom `MatFormFieldControl` for telephone number input.\n */\nvar MyTelInput = /*@__PURE__*/ (function () {\n    function MyTelInput(fb, fm, elRef) {\n        var _this = this;\n        this.fm = fm;\n        this.elRef = elRef;\n        this.stateChanges = new Subject();\n        this.focused = false;\n        this.ngControl = null;\n        this.errorState = false;\n        this.controlType = 'my-tel-input';\n        this.id = \"my-tel-input-\" + MyTelInput.nextId++;\n        this.describedBy = '';\n        this._required = false;\n        this._disabled = false;\n        this.parts = fb.group({\n            area: '',\n            exchange: '',\n            subscriber: '',\n        });\n        fm.monitor(elRef.nativeElement, true).subscribe(function (origin) {\n            _this.focused = !!origin;\n            _this.stateChanges.next();\n        });\n    }\n    Object.defineProperty(MyTelInput.prototype, \"empty\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            var _a = this.parts.value, area = _a.area, exchange = _a.exchange, subscriber = _a.subscriber;\n            return !area && !exchange && !subscriber;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MyTelInput.prototype, \"shouldLabelFloat\", {\n        get: /**\n         * @return {?}\n         */ function () { return this.focused || !this.empty; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MyTelInput.prototype, \"placeholder\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._placeholder; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._placeholder = value;\n            this.stateChanges.next();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MyTelInput.prototype, \"required\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._required; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._required = coerceBooleanProperty(value);\n            this.stateChanges.next();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MyTelInput.prototype, \"disabled\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._disabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            this.stateChanges.next();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MyTelInput.prototype, \"value\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            var _a = this.parts.value, area = _a.area, exchange = _a.exchange, subscriber = _a.subscriber;\n            if (area.length === 3 && exchange.length === 3 && subscriber.length === 4) {\n                return new MyTel(area, exchange, subscriber);\n            }\n            return null;\n        },\n        set: /**\n         * @param {?} tel\n         * @return {?}\n         */ function (tel) {\n            var _a = tel || new MyTel('', '', ''), area = _a.area, exchange = _a.exchange, subscriber = _a.subscriber;\n            this.parts.setValue({ area: area, exchange: exchange, subscriber: subscriber });\n            this.stateChanges.next();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MyTelInput.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.stateChanges.complete();\n            this.fm.stopMonitoring(this.elRef.nativeElement);\n        };\n    /**\n     * @param {?} ids\n     * @return {?}\n     */\n    MyTelInput.prototype.setDescribedByIds = /**\n     * @param {?} ids\n     * @return {?}\n     */\n        function (ids) {\n            this.describedBy = ids.join(' ');\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MyTelInput.prototype.onContainerClick = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            if (((event.target)).tagName.toLowerCase() != 'input') {\n                this.elRef.nativeElement.querySelector('input').focus();\n            }\n        };\n    MyTelInput.nextId = 0;\n    return MyTelInput;\n}());\n/**\n * \\@title Form field with custom telephone number input control.\n */\nvar FormFieldCustomControlExample = /*@__PURE__*/ (function () {\n    function FormFieldCustomControlExample() {\n    }\n    return FormFieldCustomControlExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Form field with error messages\n */\nvar FormFieldErrorExample = /*@__PURE__*/ (function () {\n    function FormFieldErrorExample() {\n        this.email = new FormControl('', [Validators.required, Validators.email]);\n    }\n    /**\n     * @return {?}\n     */\n    FormFieldErrorExample.prototype.getErrorMessage = /**\n     * @return {?}\n     */\n        function () {\n            return this.email.hasError('required') ? 'You must enter a value' :\n                this.email.hasError('email') ? 'Not a valid email' :\n                    '';\n        };\n    return FormFieldErrorExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Form field with hints\n */\nvar FormFieldHintExample = /*@__PURE__*/ (function () {\n    function FormFieldHintExample() {\n    }\n    return FormFieldHintExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Form field with label\n */\nvar FormFieldLabelExample = /*@__PURE__*/ (function () {\n    function FormFieldLabelExample(fb) {\n        this.options = fb.group({\n            hideRequired: false,\n            floatLabel: 'auto',\n        });\n    }\n    return FormFieldLabelExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Simple form field\n */\nvar FormFieldOverviewExample = /*@__PURE__*/ (function () {\n    function FormFieldOverviewExample() {\n    }\n    return FormFieldOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Form field with prefix & suffix\n */\nvar FormFieldPrefixSuffixExample = /*@__PURE__*/ (function () {\n    function FormFieldPrefixSuffixExample() {\n        this.hide = true;\n    }\n    return FormFieldPrefixSuffixExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Form field theming\n */\nvar FormFieldThemingExample = /*@__PURE__*/ (function () {\n    function FormFieldThemingExample(fb) {\n        this.options = fb.group({\n            color: 'primary',\n            fontSize: [16, Validators.min(10)],\n        });\n    }\n    /**\n     * @return {?}\n     */\n    FormFieldThemingExample.prototype.getFontSize = /**\n     * @return {?}\n     */\n        function () {\n            return Math.max(10, this.options.value.fontSize);\n        };\n    return FormFieldThemingExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Dynamic grid-list\n */\nvar GridListDynamicExample = /*@__PURE__*/ (function () {\n    function GridListDynamicExample() {\n        this.tiles = [\n            { text: 'One', cols: 3, rows: 1, color: 'lightblue' },\n            { text: 'Two', cols: 1, rows: 2, color: 'lightgreen' },\n            { text: 'Three', cols: 1, rows: 1, color: 'lightpink' },\n            { text: 'Four', cols: 2, rows: 1, color: '#DDBDF1' },\n        ];\n    }\n    return GridListDynamicExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic grid-list\n */\nvar GridListOverviewExample = /*@__PURE__*/ (function () {\n    function GridListOverviewExample() {\n    }\n    return GridListOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic icons\n */\nvar IconOverviewExample = /*@__PURE__*/ (function () {\n    function IconOverviewExample() {\n    }\n    return IconOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title SVG icons\n */\nvar IconSvgExample = /*@__PURE__*/ (function () {\n    function IconSvgExample(iconRegistry, sanitizer) {\n        iconRegistry.addSvgIcon('thumbs-up', sanitizer.bypassSecurityTrustResourceUrl('assets/img/examples/thumbup-icon.svg'));\n    }\n    return IconSvgExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Input with a clear button\n */\nvar InputClearableExample = /*@__PURE__*/ (function () {\n    function InputClearableExample() {\n        this.value = 'Clear me';\n    }\n    return InputClearableExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Error when invalid control is dirty, touched, or submitted.\n */\nvar /**\n * Error when invalid control is dirty, touched, or submitted.\n */ MyErrorStateMatcher = /*@__PURE__*/ (function () {\n    function MyErrorStateMatcher() {\n    }\n    /**\n     * @param {?} control\n     * @param {?} form\n     * @return {?}\n     */\n    MyErrorStateMatcher.prototype.isErrorState = /**\n     * @param {?} control\n     * @param {?} form\n     * @return {?}\n     */\n        function (control, form) {\n            var /** @type {?} */ isSubmitted = form && form.submitted;\n            return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n        };\n    return MyErrorStateMatcher;\n}());\n/**\n * \\@title Input with a custom ErrorStateMatcher\n */\nvar InputErrorStateMatcherExample = /*@__PURE__*/ (function () {\n    function InputErrorStateMatcherExample() {\n        this.emailFormControl = new FormControl('', [\n            Validators.required,\n            Validators.email,\n        ]);\n        this.matcher = new MyErrorStateMatcher();\n    }\n    return InputErrorStateMatcherExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Input with error messages\n */\nvar InputErrorsExample = /*@__PURE__*/ (function () {\n    function InputErrorsExample() {\n        this.emailFormControl = new FormControl('', [\n            Validators.required,\n            Validators.email,\n        ]);\n    }\n    return InputErrorsExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Inputs in a form\n */\nvar InputFormExample = /*@__PURE__*/ (function () {\n    function InputFormExample() {\n    }\n    return InputFormExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Input with hints\n */\nvar InputHintExample = /*@__PURE__*/ (function () {\n    function InputHintExample() {\n    }\n    return InputHintExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic Inputs\n */\nvar InputOverviewExample = /*@__PURE__*/ (function () {\n    function InputOverviewExample() {\n    }\n    return InputOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Inputs with prefixes and suffixes\n */\nvar InputPrefixSuffixExample = /*@__PURE__*/ (function () {\n    function InputPrefixSuffixExample() {\n    }\n    return InputPrefixSuffixExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic list\n */\nvar ListOverviewExample = /*@__PURE__*/ (function () {\n    function ListOverviewExample() {\n    }\n    return ListOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title List with sections\n */\nvar ListSectionsExample = /*@__PURE__*/ (function () {\n    function ListSectionsExample() {\n        this.folders = [\n            {\n                name: 'Photos',\n                updated: new Date('1/1/16'),\n            },\n            {\n                name: 'Recipes',\n                updated: new Date('1/17/16'),\n            },\n            {\n                name: 'Work',\n                updated: new Date('1/28/16'),\n            }\n        ];\n        this.notes = [\n            {\n                name: 'Vacation Itinerary',\n                updated: new Date('2/20/16'),\n            },\n            {\n                name: 'Kitchen Remodel',\n                updated: new Date('1/18/16'),\n            }\n        ];\n    }\n    return ListSectionsExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title List with selection\n */\nvar ListSelectionExample = /*@__PURE__*/ (function () {\n    function ListSelectionExample() {\n        this.typesOfShoes = ['Boots', 'Clogs', 'Loafers', 'Moccasins', 'Sneakers'];\n    }\n    return ListSelectionExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Menu with icons\n */\nvar MenuIconsExample = /*@__PURE__*/ (function () {\n    function MenuIconsExample() {\n    }\n    return MenuIconsExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic menu\n */\nvar MenuOverviewExample = /*@__PURE__*/ (function () {\n    function MenuOverviewExample() {\n    }\n    return MenuOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Nested menu\n */\nvar NestedMenuExample = /*@__PURE__*/ (function () {\n    function NestedMenuExample() {\n    }\n    return NestedMenuExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Configurable paginator\n */\nvar PaginatorConfigurableExample = /*@__PURE__*/ (function () {\n    function PaginatorConfigurableExample() {\n        // MatPaginator Inputs\n        this.length = 100;\n        this.pageSize = 10;\n        this.pageSizeOptions = [5, 10, 25, 100];\n    }\n    /**\n     * @param {?} setPageSizeOptionsInput\n     * @return {?}\n     */\n    PaginatorConfigurableExample.prototype.setPageSizeOptions = /**\n     * @param {?} setPageSizeOptionsInput\n     * @return {?}\n     */\n        function (setPageSizeOptionsInput) {\n            this.pageSizeOptions = setPageSizeOptionsInput.split(',').map(function (str) { return +str; });\n        };\n    return PaginatorConfigurableExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Paginator\n */\nvar PaginatorOverviewExample = /*@__PURE__*/ (function () {\n    function PaginatorOverviewExample() {\n    }\n    return PaginatorOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Buffer progress-bar\n */\nvar ProgressBarBufferExample = /*@__PURE__*/ (function () {\n    function ProgressBarBufferExample() {\n    }\n    return ProgressBarBufferExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Configurable progress-bar\n */\nvar ProgressBarConfigurableExample = /*@__PURE__*/ (function () {\n    function ProgressBarConfigurableExample() {\n        this.color = 'primary';\n        this.mode = 'determinate';\n        this.value = 50;\n        this.bufferValue = 75;\n    }\n    return ProgressBarConfigurableExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Determinate progress-bar\n */\nvar ProgressBarDeterminateExample = /*@__PURE__*/ (function () {\n    function ProgressBarDeterminateExample() {\n    }\n    return ProgressBarDeterminateExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Indeterminate progress-bar\n */\nvar ProgressBarIndeterminateExample = /*@__PURE__*/ (function () {\n    function ProgressBarIndeterminateExample() {\n    }\n    return ProgressBarIndeterminateExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Query progress-bar\n */\nvar ProgressBarQueryExample = /*@__PURE__*/ (function () {\n    function ProgressBarQueryExample() {\n    }\n    return ProgressBarQueryExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Configurable progress spinner\n */\nvar ProgressSpinnerConfigurableExample = /*@__PURE__*/ (function () {\n    function ProgressSpinnerConfigurableExample() {\n        this.color = 'primary';\n        this.mode = 'determinate';\n        this.value = 50;\n    }\n    return ProgressSpinnerConfigurableExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic progress-spinner\n */\nvar ProgressSpinnerOverviewExample = /*@__PURE__*/ (function () {\n    function ProgressSpinnerOverviewExample() {\n    }\n    return ProgressSpinnerOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Radios with ngModel\n */\nvar RadioNgModelExample = /*@__PURE__*/ (function () {\n    function RadioNgModelExample() {\n        this.seasons = ['Winter', 'Spring', 'Summer', 'Autumn'];\n    }\n    return RadioNgModelExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic radios\n */\nvar RadioOverviewExample = /*@__PURE__*/ (function () {\n    function RadioOverviewExample() {\n    }\n    return RadioOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Select with custom trigger text\n */\nvar SelectCustomTriggerExample = /*@__PURE__*/ (function () {\n    function SelectCustomTriggerExample() {\n        this.toppings = new FormControl();\n        this.toppingList = ['Extra cheese', 'Mushroom', 'Onion', 'Pepperoni', 'Sausage', 'Tomato'];\n    }\n    return SelectCustomTriggerExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Disabled select\n */\nvar SelectDisabledExample = /*@__PURE__*/ (function () {\n    function SelectDisabledExample() {\n        this.disableSelect = new FormControl(false);\n    }\n    return SelectDisabledExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Error when invalid control is dirty, touched, or submitted.\n */\nvar /**\n * Error when invalid control is dirty, touched, or submitted.\n */ MyErrorStateMatcher$1 = (function () {\n    function MyErrorStateMatcher() {\n    }\n    /**\n     * @param {?} control\n     * @param {?} form\n     * @return {?}\n     */\n    MyErrorStateMatcher.prototype.isErrorState = /**\n     * @param {?} control\n     * @param {?} form\n     * @return {?}\n     */\n        function (control, form) {\n            var /** @type {?} */ isSubmitted = form && form.submitted;\n            return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n        };\n    return MyErrorStateMatcher;\n}());\n/**\n * \\@title Select with a custom ErrorStateMatcher\n */\nvar SelectErrorStateMatcherExample = /*@__PURE__*/ (function () {\n    function SelectErrorStateMatcherExample() {\n        this.selected = new FormControl('valid', [\n            Validators.required,\n            Validators.pattern('valid'),\n        ]);\n        this.matcher = new MyErrorStateMatcher$1();\n    }\n    return SelectErrorStateMatcherExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Select in a form\n */\nvar SelectFormExample = /*@__PURE__*/ (function () {\n    function SelectFormExample() {\n        this.foods = [\n            { value: 'steak-0', viewValue: 'Steak' },\n            { value: 'pizza-1', viewValue: 'Pizza' },\n            { value: 'tacos-2', viewValue: 'Tacos' }\n        ];\n    }\n    return SelectFormExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Select with form field features\n */\nvar SelectHintErrorExample = /*@__PURE__*/ (function () {\n    function SelectHintErrorExample() {\n        this.animalControl = new FormControl('', [Validators.required]);\n        this.animals = [\n            { name: 'Dog', sound: 'Woof!' },\n            { name: 'Cat', sound: 'Meow!' },\n            { name: 'Cow', sound: 'Moo!' },\n            { name: 'Fox', sound: 'Wa-pa-pa-pa-pa-pa-pow!' },\n        ];\n    }\n    return SelectHintErrorExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Select with multiple selection\n */\nvar SelectMultipleExample = /*@__PURE__*/ (function () {\n    function SelectMultipleExample() {\n        this.toppings = new FormControl();\n        this.toppingList = ['Extra cheese', 'Mushroom', 'Onion', 'Pepperoni', 'Sausage', 'Tomato'];\n    }\n    return SelectMultipleExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Select with no option ripple\n */\nvar SelectNoRippleExample = /*@__PURE__*/ (function () {\n    function SelectNoRippleExample() {\n    }\n    return SelectNoRippleExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Select with option groups\n */\nvar SelectOptgroupExample = /*@__PURE__*/ (function () {\n    function SelectOptgroupExample() {\n        this.pokemonControl = new FormControl();\n        this.pokemonGroups = [\n            {\n                name: 'Grass',\n                pokemon: [\n                    { value: 'bulbasaur-0', viewValue: 'Bulbasaur' },\n                    { value: 'oddish-1', viewValue: 'Oddish' },\n                    { value: 'bellsprout-2', viewValue: 'Bellsprout' }\n                ]\n            },\n            {\n                name: 'Water',\n                pokemon: [\n                    { value: 'squirtle-3', viewValue: 'Squirtle' },\n                    { value: 'psyduck-4', viewValue: 'Psyduck' },\n                    { value: 'horsea-5', viewValue: 'Horsea' }\n                ]\n            },\n            {\n                name: 'Fire',\n                disabled: true,\n                pokemon: [\n                    { value: 'charmander-6', viewValue: 'Charmander' },\n                    { value: 'vulpix-7', viewValue: 'Vulpix' },\n                    { value: 'flareon-8', viewValue: 'Flareon' }\n                ]\n            },\n            {\n                name: 'Psychic',\n                pokemon: [\n                    { value: 'mew-9', viewValue: 'Mew' },\n                    { value: 'mewtwo-10', viewValue: 'Mewtwo' },\n                ]\n            }\n        ];\n    }\n    return SelectOptgroupExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic select\n */\nvar SelectOverviewExample = /*@__PURE__*/ (function () {\n    function SelectOverviewExample() {\n        this.foods = [\n            { value: 'steak-0', viewValue: 'Steak' },\n            { value: 'pizza-1', viewValue: 'Pizza' },\n            { value: 'tacos-2', viewValue: 'Tacos' }\n        ];\n    }\n    return SelectOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Select with custom panel styling\n */\nvar SelectPanelClassExample = /*@__PURE__*/ (function () {\n    function SelectPanelClassExample() {\n        this.panelColor = new FormControl('red');\n    }\n    return SelectPanelClassExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Select with reset option\n */\nvar SelectResetExample = /*@__PURE__*/ (function () {\n    function SelectResetExample() {\n        this.states = [\n            'Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware',\n            'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky',\n            'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi',\n            'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico',\n            'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania',\n            'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont',\n            'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'\n        ];\n    }\n    return SelectResetExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Select with 2-way value binding\n */\nvar SelectValueBindingExample = /*@__PURE__*/ (function () {\n    function SelectValueBindingExample() {\n        this.selected = 'option2';\n    }\n    return SelectValueBindingExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Autosize sidenav\n */\nvar SidenavAutosizeExample = /*@__PURE__*/ (function () {\n    function SidenavAutosizeExample() {\n        this.showFiller = false;\n    }\n    return SidenavAutosizeExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Drawer with explicit backdrop setting\n */\nvar SidenavBackdropExample = /*@__PURE__*/ (function () {\n    function SidenavBackdropExample() {\n    }\n    return SidenavBackdropExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Sidenav with custom escape and backdrop click behavior\n */\nvar SidenavDisableCloseExample = /*@__PURE__*/ (function () {\n    function SidenavDisableCloseExample() {\n        this.reason = '';\n        this.shouldRun = [/(^|\\.)plnkr\\.co$/, /(^|\\.)stackblitz\\.io$/].some(function (h) { return h.test(window.location.host); });\n    }\n    /**\n     * @param {?} reason\n     * @return {?}\n     */\n    SidenavDisableCloseExample.prototype.close = /**\n     * @param {?} reason\n     * @return {?}\n     */\n        function (reason) {\n            this.reason = reason;\n            this.sidenav.close();\n        };\n    return SidenavDisableCloseExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic drawer\n */\nvar SidenavDrawerOverviewExample = /*@__PURE__*/ (function () {\n    function SidenavDrawerOverviewExample() {\n    }\n    return SidenavDrawerOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Fixed sidenav\n */\nvar SidenavFixedExample = /*@__PURE__*/ (function () {\n    function SidenavFixedExample(fb) {\n        this.shouldRun = [/(^|\\.)plnkr\\.co$/, /(^|\\.)stackblitz\\.io$/].some(function (h) { return h.test(window.location.host); });\n        this.options = fb.group({\n            bottom: 0,\n            fixed: false,\n            top: 0\n        });\n    }\n    return SidenavFixedExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Sidenav with configurable mode\n */\nvar SidenavModeExample = /*@__PURE__*/ (function () {\n    function SidenavModeExample() {\n        this.mode = new FormControl('over');\n        this.shouldRun = [/(^|\\.)plnkr\\.co$/, /(^|\\.)stackblitz\\.io$/].some(function (h) { return h.test(window.location.host); });\n    }\n    return SidenavModeExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Sidenav open & close behavior\n */\nvar SidenavOpenCloseExample = /*@__PURE__*/ (function () {\n    function SidenavOpenCloseExample() {\n        this.events = [];\n        this.shouldRun = [/(^|\\.)plnkr\\.co$/, /(^|\\.)stackblitz\\.io$/].some(function (h) { return h.test(window.location.host); });\n    }\n    return SidenavOpenCloseExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic sidenav\n */\nvar SidenavOverviewExample = /*@__PURE__*/ (function () {\n    function SidenavOverviewExample() {\n        this.shouldRun = [/(^|\\.)plnkr\\.co$/, /(^|\\.)stackblitz\\.io$/].some(function (h) { return h.test(window.location.host); });\n    }\n    return SidenavOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Implicit main content with two sidenavs\n */\nvar SidenavPositionExample = /*@__PURE__*/ (function () {\n    function SidenavPositionExample() {\n        this.shouldRun = [/(^|\\.)plnkr\\.co$/, /(^|\\.)stackblitz\\.io$/].some(function (h) { return h.test(window.location.host); });\n    }\n    return SidenavPositionExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Responsive sidenav\n */\nvar SidenavResponsiveExample = /*@__PURE__*/ (function () {\n    function SidenavResponsiveExample(changeDetectorRef, media) {\n        this.fillerNav = Array.from({ length: 50 }, function (_, i) { return \"Nav Item \" + (i + 1); });\n        this.fillerContent = Array.from({ length: 50 }, function () {\n            return \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\\n       labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\\n       laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in\\n       voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\\n       cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\";\n        });\n        this.shouldRun = [/(^|\\.)plnkr\\.co$/, /(^|\\.)stackblitz\\.io$/].some(function (h) { return h.test(window.location.host); });\n        this.mobileQuery = media.matchMedia('(max-width: 600px)');\n        this._mobileQueryListener = function () { return changeDetectorRef.detectChanges(); };\n        this.mobileQuery.addListener(this._mobileQueryListener);\n    }\n    /**\n     * @return {?}\n     */\n    SidenavResponsiveExample.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.mobileQuery.removeListener(this._mobileQueryListener);\n        };\n    return SidenavResponsiveExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Configurable slide-toggle\n */\nvar SlideToggleConfigurableExample = /*@__PURE__*/ (function () {\n    function SlideToggleConfigurableExample() {\n        this.color = 'accent';\n        this.checked = false;\n        this.disabled = false;\n    }\n    return SlideToggleConfigurableExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Slide-toggle with forms\n */\nvar SlideToggleFormsExample = /*@__PURE__*/ (function () {\n    function SlideToggleFormsExample(formBuilder) {\n        this.isChecked = true;\n        this.formGroup = formBuilder.group({\n            enableWifi: '',\n            acceptTerms: ['', Validators.requiredTrue]\n        });\n    }\n    /**\n     * @return {?}\n     */\n    SlideToggleFormsExample.prototype.onFormSubmit = /**\n     * @return {?}\n     */\n        function () {\n            alert(JSON.stringify(this.formGroup.value, null, 2));\n        };\n    return SlideToggleFormsExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic slide-toggles\n */\nvar SlideToggleOverviewExample = /*@__PURE__*/ (function () {\n    function SlideToggleOverviewExample() {\n    }\n    return SlideToggleOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Configurable slider\n */\nvar SliderConfigurableExample = /*@__PURE__*/ (function () {\n    function SliderConfigurableExample() {\n        this.autoTicks = false;\n        this.disabled = false;\n        this.invert = false;\n        this.max = 100;\n        this.min = 0;\n        this.showTicks = false;\n        this.step = 1;\n        this.thumbLabel = false;\n        this.value = 0;\n        this.vertical = false;\n        this._tickInterval = 1;\n    }\n    Object.defineProperty(SliderConfigurableExample.prototype, \"tickInterval\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.showTicks ? (this.autoTicks ? 'auto' : this._tickInterval) : 0;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._tickInterval = coerceNumberProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return SliderConfigurableExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Slider with custom thumb label formatting.\n */\nvar SliderFormattingExample = /*@__PURE__*/ (function () {\n    function SliderFormattingExample() {\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    SliderFormattingExample.prototype.formatLabel = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            if (!value) {\n                return 0;\n            }\n            if (value >= 1000) {\n                return Math.round(value / 1000) + 'k';\n            }\n            return value;\n        };\n    return SliderFormattingExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic slider\n */\nvar SliderOverviewExample = /*@__PURE__*/ (function () {\n    function SliderOverviewExample() {\n    }\n    return SliderOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Snack-bar with a custom component\n */\nvar SnackBarComponentExample = /*@__PURE__*/ (function () {\n    function SnackBarComponentExample(snackBar) {\n        this.snackBar = snackBar;\n    }\n    /**\n     * @return {?}\n     */\n    SnackBarComponentExample.prototype.openSnackBar = /**\n     * @return {?}\n     */\n        function () {\n            this.snackBar.openFromComponent(PizzaPartyComponent, {\n                duration: 500,\n            });\n        };\n    return SnackBarComponentExample;\n}());\nvar PizzaPartyComponent = /*@__PURE__*/ (function () {\n    function PizzaPartyComponent() {\n    }\n    return PizzaPartyComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic snack-bar\n */\nvar SnackBarOverviewExample = /*@__PURE__*/ (function () {\n    function SnackBarOverviewExample(snackBar) {\n        this.snackBar = snackBar;\n    }\n    /**\n     * @param {?} message\n     * @param {?} action\n     * @return {?}\n     */\n    SnackBarOverviewExample.prototype.openSnackBar = /**\n     * @param {?} message\n     * @param {?} action\n     * @return {?}\n     */\n        function (message, action) {\n            this.snackBar.open(message, action, {\n                duration: 2000,\n            });\n        };\n    return SnackBarOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Snack-bar with configurable position\n */\nvar SnackBarPositionExample = /*@__PURE__*/ (function () {\n    function SnackBarPositionExample(snackBar) {\n        this.snackBar = snackBar;\n        this.horizontalPosition = 'start';\n        this.verticalPosition = 'bottom';\n    }\n    /**\n     * @return {?}\n     */\n    SnackBarPositionExample.prototype.openSnackBar = /**\n     * @return {?}\n     */\n        function () {\n            this.snackBar.open('Canonball!!', 'End now', {\n                duration: 500,\n                horizontalPosition: this.horizontalPosition,\n                verticalPosition: this.verticalPosition,\n            });\n        };\n    return SnackBarPositionExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Sorting overview\n */\nvar SortOverviewExample = /*@__PURE__*/ (function () {\n    function SortOverviewExample() {\n        this.desserts = [\n            { name: 'Frozen yogurt', calories: 159, fat: 6, carbs: 24, protein: 4 },\n            { name: 'Ice cream sandwich', calories: 237, fat: 9, carbs: 37, protein: 4 },\n            { name: 'Eclair', calories: 262, fat: 16, carbs: 24, protein: 6 },\n            { name: 'Cupcake', calories: 305, fat: 4, carbs: 67, protein: 4 },\n            { name: 'Gingerbread', calories: 356, fat: 16, carbs: 49, protein: 4 },\n        ];\n        this.sortedData = this.desserts.slice();\n    }\n    /**\n     * @param {?} sort\n     * @return {?}\n     */\n    SortOverviewExample.prototype.sortData = /**\n     * @param {?} sort\n     * @return {?}\n     */\n        function (sort) {\n            var /** @type {?} */ data = this.desserts.slice();\n            if (!sort.active || sort.direction === '') {\n                this.sortedData = data;\n                return;\n            }\n            this.sortedData = data.sort(function (a, b) {\n                var /** @type {?} */ isAsc = sort.direction === 'asc';\n                switch (sort.active) {\n                    case 'name': return compare(a.name, b.name, isAsc);\n                    case 'calories': return compare(a.calories, b.calories, isAsc);\n                    case 'fat': return compare(a.fat, b.fat, isAsc);\n                    case 'carbs': return compare(a.carbs, b.carbs, isAsc);\n                    case 'protein': return compare(a.protein, b.protein, isAsc);\n                    default: return 0;\n                }\n            });\n        };\n    return SortOverviewExample;\n}());\n/**\n * @param {?} a\n * @param {?} b\n * @param {?} isAsc\n * @return {?}\n */\nfunction compare(a, b, isAsc) {\n    return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Stepper with editable steps\n */\nvar StepperEditableExample = /*@__PURE__*/ (function () {\n    function StepperEditableExample(_formBuilder) {\n        this._formBuilder = _formBuilder;\n        this.isEditable = false;\n    }\n    /**\n     * @return {?}\n     */\n    StepperEditableExample.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.firstFormGroup = this._formBuilder.group({\n                firstCtrl: ['', Validators.required]\n            });\n            this.secondFormGroup = this._formBuilder.group({\n                secondCtrl: ['', Validators.required]\n            });\n        };\n    return StepperEditableExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Stepper with optional steps\n */\nvar StepperOptionalExample = /*@__PURE__*/ (function () {\n    function StepperOptionalExample(_formBuilder) {\n        this._formBuilder = _formBuilder;\n        this.isOptional = false;\n    }\n    /**\n     * @return {?}\n     */\n    StepperOptionalExample.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.firstFormGroup = this._formBuilder.group({\n                firstCtrl: ['', Validators.required]\n            });\n            this.secondFormGroup = this._formBuilder.group({\n                secondCtrl: ''\n            });\n        };\n    return StepperOptionalExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Stepper overview\n */\nvar StepperOverviewExample = /*@__PURE__*/ (function () {\n    function StepperOverviewExample(_formBuilder) {\n        this._formBuilder = _formBuilder;\n        this.isLinear = false;\n    }\n    /**\n     * @return {?}\n     */\n    StepperOverviewExample.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.firstFormGroup = this._formBuilder.group({\n                firstCtrl: ['', Validators.required]\n            });\n            this.secondFormGroup = this._formBuilder.group({\n                secondCtrl: ['', Validators.required]\n            });\n        };\n    return StepperOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Stepper vertical\n */\nvar StepperVerticalExample = /*@__PURE__*/ (function () {\n    function StepperVerticalExample(_formBuilder) {\n        this._formBuilder = _formBuilder;\n        this.isLinear = false;\n    }\n    /**\n     * @return {?}\n     */\n    StepperVerticalExample.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.firstFormGroup = this._formBuilder.group({\n                firstCtrl: ['', Validators.required]\n            });\n            this.secondFormGroup = this._formBuilder.group({\n                secondCtrl: ['', Validators.required]\n            });\n        };\n    return StepperVerticalExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Tab group with asynchronously loading tab contents\n */\nvar TabGroupAsyncExample = /*@__PURE__*/ (function () {\n    function TabGroupAsyncExample() {\n        this.asyncTabs = Observable.create(function (observer) {\n            setTimeout(function () {\n                observer.next([\n                    { label: 'First', content: 'Content 1' },\n                    { label: 'Second', content: 'Content 2' },\n                    { label: 'Third', content: 'Content 3' },\n                ]);\n            }, 1000);\n        });\n    }\n    return TabGroupAsyncExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic use of the tab group\n */\nvar TabGroupBasicExample = /*@__PURE__*/ (function () {\n    function TabGroupBasicExample() {\n    }\n    return TabGroupBasicExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Using tabs with a custom label template\n */\nvar TabGroupCustomLabelExample = /*@__PURE__*/ (function () {\n    function TabGroupCustomLabelExample() {\n    }\n    return TabGroupCustomLabelExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Tag group with dynamic height based on tab contents\n */\nvar TabGroupDynamicHeightExample = /*@__PURE__*/ (function () {\n    function TabGroupDynamicHeightExample() {\n    }\n    return TabGroupDynamicHeightExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Tag group with dynamically changing tabs\n */\nvar TabGroupDynamicExample = /*@__PURE__*/ (function () {\n    function TabGroupDynamicExample() {\n        this.tabs = ['First', 'Second', 'Third'];\n        this.selected = new FormControl(0);\n    }\n    /**\n     * @param {?} selectAfterAdding\n     * @return {?}\n     */\n    TabGroupDynamicExample.prototype.addTab = /**\n     * @param {?} selectAfterAdding\n     * @return {?}\n     */\n        function (selectAfterAdding) {\n            this.tabs.push('New');\n            if (selectAfterAdding) {\n                this.selected.setValue(this.tabs.length - 1);\n            }\n        };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    TabGroupDynamicExample.prototype.removeTab = /**\n     * @param {?} index\n     * @return {?}\n     */\n        function (index) {\n            this.tabs.splice(index, 1);\n        };\n    return TabGroupDynamicExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Tab group with the headers on the bottom\n */\nvar TabGroupHeaderBelowExample = /*@__PURE__*/ (function () {\n    function TabGroupHeaderBelowExample() {\n    }\n    return TabGroupHeaderBelowExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Tab group where the tab content is loaded lazily (when activated)\n */\nvar TabGroupLazyLoadedExample = /*@__PURE__*/ (function () {\n    function TabGroupLazyLoadedExample() {\n        this.tabLoadTimes = [];\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    TabGroupLazyLoadedExample.prototype.getTimeLoaded = /**\n     * @param {?} index\n     * @return {?}\n     */\n        function (index) {\n            if (!this.tabLoadTimes[index]) {\n                this.tabLoadTimes[index] = new Date();\n            }\n            return this.tabLoadTimes[index];\n        };\n    return TabGroupLazyLoadedExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Tab group with stretched labels\n */\nvar TabGroupStretchedExample = /*@__PURE__*/ (function () {\n    function TabGroupStretchedExample() {\n    }\n    return TabGroupStretchedExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Customizing the theme options on the tab group\n */\nvar TabGroupThemeExample = /*@__PURE__*/ (function () {\n    function TabGroupThemeExample() {\n    }\n    return TabGroupThemeExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic use of the tab nav bar\n */\nvar TabNavBarBasicExample = /*@__PURE__*/ (function () {\n    function TabNavBarBasicExample() {\n        this.links = ['First', 'Second', 'Third'];\n        this.activeLink = this.links[0];\n        this.background = '';\n    }\n    /**\n     * @return {?}\n     */\n    TabNavBarBasicExample.prototype.toggleBackground = /**\n     * @return {?}\n     */\n        function () {\n            this.background = this.background ? '' : 'primary';\n        };\n    return TabNavBarBasicExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ ELEMENT_DATA$2 = [\n    { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n    { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n    { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n    { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n    { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n    { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n    { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n    { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n    { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n    { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n];\n/**\n * \\@title Basic use of `<mat-table>` (uses display flex)\n */\nvar TableBasicFlexExample = /*@__PURE__*/ (function () {\n    function TableBasicFlexExample() {\n        this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n        this.dataSource = ELEMENT_DATA$2;\n    }\n    return TableBasicFlexExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ ELEMENT_DATA$3 = [\n    { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n    { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n    { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n    { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n    { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n    { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n    { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n    { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n    { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n    { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n];\n/**\n * \\@title Basic use of `<table mat-table>`\n */\nvar TableBasicExample = /*@__PURE__*/ (function () {\n    function TableBasicExample() {\n        this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n        this.dataSource = ELEMENT_DATA$3;\n    }\n    return TableBasicExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ ELEMENT_DATA$4 = [\n    { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n    { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n    { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n    { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n    { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n    { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n    { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n    { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n    { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n    { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n];\n/**\n * \\@title Table dynamically changing the columns displayed\n */\nvar TableDynamicColumnsExample = /*@__PURE__*/ (function () {\n    function TableDynamicColumnsExample() {\n        this.displayedColumns = ['name', 'weight', 'symbol', 'position'];\n        this.columnsToDisplay = this.displayedColumns.slice();\n        this.data = ELEMENT_DATA$4;\n    }\n    /**\n     * @return {?}\n     */\n    TableDynamicColumnsExample.prototype.addColumn = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ randomColumn = Math.floor(Math.random() * this.displayedColumns.length);\n            this.columnsToDisplay.push(this.displayedColumns[randomColumn]);\n        };\n    /**\n     * @return {?}\n     */\n    TableDynamicColumnsExample.prototype.removeColumn = /**\n     * @return {?}\n     */\n        function () {\n            if (this.columnsToDisplay.length) {\n                this.columnsToDisplay.pop();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    TableDynamicColumnsExample.prototype.shuffle = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ currentIndex = this.columnsToDisplay.length;\n            while (0 !== currentIndex) {\n                var /** @type {?} */ randomIndex = Math.floor(Math.random() * currentIndex);\n                currentIndex -= 1;\n                // Swap\n                var /** @type {?} */ temp = this.columnsToDisplay[currentIndex];\n                this.columnsToDisplay[currentIndex] = this.columnsToDisplay[randomIndex];\n                this.columnsToDisplay[randomIndex] = temp;\n            }\n        };\n    return TableDynamicColumnsExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Table with expandable rows\n */\nvar TableExpandableRowsExample = /*@__PURE__*/ (function () {\n    function TableExpandableRowsExample() {\n        this.dataSource = ELEMENT_DATA$5;\n        this.columnsToDisplay = ['name', 'weight', 'symbol', 'position'];\n    }\n    return TableExpandableRowsExample;\n}());\nvar /** @type {?} */ ELEMENT_DATA$5 = [\n    {\n        position: 1,\n        name: 'Hydrogen',\n        weight: 1.0079,\n        symbol: 'H',\n        description: \"Hydrogen is a chemical element with symbol H and atomic number 1. With a standard\\n        atomic weight of 1.008, hydrogen is the lightest element on the periodic table.\"\n    }, {\n        position: 2,\n        name: 'Helium',\n        weight: 4.0026,\n        symbol: 'He',\n        description: \"Helium is a chemical element with symbol He and atomic number 2. It is a\\n        colorless, odorless, tasteless, non-toxic, inert, monatomic gas, the first in the noble gas\\n        group in the periodic table. Its boiling point is the lowest among all the elements.\"\n    }, {\n        position: 3,\n        name: 'Lithium',\n        weight: 6.941,\n        symbol: 'Li',\n        description: \"Lithium is a chemical element with symbol Li and atomic number 3. It is a soft,\\n        silvery-white alkali metal. Under standard conditions, it is the lightest metal and the\\n        lightest solid element.\"\n    }, {\n        position: 4,\n        name: 'Beryllium',\n        weight: 9.0122,\n        symbol: 'Be',\n        description: \"Beryllium is a chemical element with symbol Be and atomic number 4. It is a\\n        relatively rare element in the universe, usually occurring as a product of the spallation of\\n        larger atomic nuclei that have collided with cosmic rays.\"\n    }, {\n        position: 5,\n        name: 'Boron',\n        weight: 10.811,\n        symbol: 'B',\n        description: \"Boron is a chemical element with symbol B and atomic number 5. Produced entirely\\n        by cosmic ray spallation and supernovae and not by stellar nucleosynthesis, it is a\\n        low-abundance element in the Solar system and in the Earth's crust.\"\n    }, {\n        position: 6,\n        name: 'Carbon',\n        weight: 12.0107,\n        symbol: 'C',\n        description: \"Carbon is a chemical element with symbol C and atomic number 6. It is nonmetallic\\n        and tetravalent\\u2014making four electrons available to form covalent chemical bonds. It belongs\\n        to group 14 of the periodic table.\"\n    }, {\n        position: 7,\n        name: 'Nitrogen',\n        weight: 14.0067,\n        symbol: 'N',\n        description: \"Nitrogen is a chemical element with symbol N and atomic number 7. It was first\\n        discovered and isolated by Scottish physician Daniel Rutherford in 1772.\"\n    }, {\n        position: 8,\n        name: 'Oxygen',\n        weight: 15.9994,\n        symbol: 'O',\n        description: \"Oxygen is a chemical element with symbol O and atomic number 8. It is a member of\\n         the chalcogen group on the periodic table, a highly reactive nonmetal, and an oxidizing\\n         agent that readily forms oxides with most elements as well as with other compounds.\"\n    }, {\n        position: 9,\n        name: 'Fluorine',\n        weight: 18.9984,\n        symbol: 'F',\n        description: \"Fluorine is a chemical element with symbol F and atomic number 9. It is the\\n        lightest halogen and exists as a highly toxic pale yellow diatomic gas at standard\\n        conditions.\"\n    }, {\n        position: 10,\n        name: 'Neon',\n        weight: 20.1797,\n        symbol: 'Ne',\n        description: \"Neon is a chemical element with symbol Ne and atomic number 10. It is a noble gas.\\n        Neon is a colorless, odorless, inert monatomic gas under standard conditions, with about\\n        two-thirds the density of air.\"\n    },\n];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ ELEMENT_DATA$6 = [\n    { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n    { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n    { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n    { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n    { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n    { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n    { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n    { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n    { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n    { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n];\n/**\n * \\@title Table with filtering\n */\nvar TableFilteringExample = /*@__PURE__*/ (function () {\n    function TableFilteringExample() {\n        this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n        this.dataSource = new MatTableDataSource(ELEMENT_DATA$6);\n    }\n    /**\n     * @param {?} filterValue\n     * @return {?}\n     */\n    TableFilteringExample.prototype.applyFilter = /**\n     * @param {?} filterValue\n     * @return {?}\n     */\n        function (filterValue) {\n            this.dataSource.filter = filterValue.trim().toLowerCase();\n        };\n    return TableFilteringExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Footer row table\n */\nvar TableFooterRowExample = /*@__PURE__*/ (function () {\n    function TableFooterRowExample() {\n        this.displayedColumns = ['item', 'cost'];\n        this.transactions = [\n            { item: 'Beach ball', cost: 4 },\n            { item: 'Towel', cost: 5 },\n            { item: 'Frisbee', cost: 2 },\n            { item: 'Sunscreen', cost: 4 },\n            { item: 'Cooler', cost: 25 },\n            { item: 'Swim suit', cost: 15 },\n        ];\n    }\n    /** Gets the total cost of all transactions. */\n    /**\n     * Gets the total cost of all transactions.\n     * @return {?}\n     */\n    TableFooterRowExample.prototype.getTotalCost = /**\n     * Gets the total cost of all transactions.\n     * @return {?}\n     */\n        function () {\n            return this.transactions.map(function (t) { return t.cost; }).reduce(function (acc, value) { return acc + value; }, 0);\n        };\n    return TableFooterRowExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Table retrieving data through HTTP\n */\nvar TableHttpExample = /*@__PURE__*/ (function () {\n    function TableHttpExample(http) {\n        this.http = http;\n        this.displayedColumns = ['created', 'state', 'number', 'title'];\n        this.data = [];\n        this.resultsLength = 0;\n        this.isLoadingResults = true;\n        this.isRateLimitReached = false;\n    }\n    /**\n     * @return {?}\n     */\n    TableHttpExample.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.exampleDatabase = new ExampleHttpDao(this.http);\n            // If the user changes the sort order, reset back to the first page.\n            this.sort.sortChange.subscribe(function () { return _this.paginator.pageIndex = 0; });\n            merge(this.sort.sortChange, this.paginator.page)\n                .pipe(startWith({}), switchMap(function () {\n                _this.isLoadingResults = true;\n                return /** @type {?} */ ((_this.exampleDatabase)).getRepoIssues(_this.sort.active, _this.sort.direction, _this.paginator.pageIndex);\n            }), map(function (data) {\n                // Flip flag to show that loading has finished.\n                // Flip flag to show that loading has finished.\n                _this.isLoadingResults = false;\n                _this.isRateLimitReached = false;\n                _this.resultsLength = data.total_count;\n                return data.items;\n            }), catchError(function () {\n                _this.isLoadingResults = false;\n                // Catch if the GitHub API has reached its rate limit. Return empty data.\n                // Catch if the GitHub API has reached its rate limit. Return empty data.\n                _this.isRateLimitReached = true;\n                return of([]);\n            })).subscribe(function (data) { return _this.data = data; });\n        };\n    return TableHttpExample;\n}());\n/**\n * An example database that the data source uses to retrieve data for the table.\n */\nvar /**\n * An example database that the data source uses to retrieve data for the table.\n */ ExampleHttpDao = /*@__PURE__*/ (function () {\n    function ExampleHttpDao(http) {\n        this.http = http;\n    }\n    /**\n     * @param {?} sort\n     * @param {?} order\n     * @param {?} page\n     * @return {?}\n     */\n    ExampleHttpDao.prototype.getRepoIssues = /**\n     * @param {?} sort\n     * @param {?} order\n     * @param {?} page\n     * @return {?}\n     */\n        function (sort, order, page) {\n            var /** @type {?} */ href = 'https://api.github.com/search/issues';\n            var /** @type {?} */ requestUrl = href + \"?q=repo:angular/material2&sort=\" + sort + \"&order=\" + order + \"&page=\" + (page + 1);\n            return this.http.get(requestUrl);\n        };\n    return ExampleHttpDao;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Table with multiple header and footer rows\n */\nvar TableMultipleHeaderFooterExample = /*@__PURE__*/ (function () {\n    function TableMultipleHeaderFooterExample() {\n        this.displayedColumns = ['item', 'cost'];\n        this.transactions = [\n            { item: 'Beach ball', cost: 4 },\n            { item: 'Towel', cost: 5 },\n            { item: 'Frisbee', cost: 2 },\n            { item: 'Sunscreen', cost: 4 },\n            { item: 'Cooler', cost: 25 },\n            { item: 'Swim suit', cost: 15 },\n        ];\n    }\n    /** Gets the total cost of all transactions. */\n    /**\n     * Gets the total cost of all transactions.\n     * @return {?}\n     */\n    TableMultipleHeaderFooterExample.prototype.getTotalCost = /**\n     * Gets the total cost of all transactions.\n     * @return {?}\n     */\n        function () {\n            return this.transactions.map(function (t) { return t.cost; }).reduce(function (acc, value) { return acc + value; }, 0);\n        };\n    return TableMultipleHeaderFooterExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Constants used to fill up our data base.\n */\nvar /** @type {?} */ COLORS = ['maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple',\n    'fuchsia', 'lime', 'teal', 'aqua', 'blue', 'navy', 'black', 'gray'];\nvar /** @type {?} */ NAMES = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack',\n    'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper',\n    'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\n/**\n * \\@title Data table with sorting, pagination, and filtering.\n */\nvar TableOverviewExample = /*@__PURE__*/ (function () {\n    function TableOverviewExample() {\n        this.displayedColumns = ['id', 'name', 'progress', 'color'];\n        // Create 100 users\n        var /** @type {?} */ users = Array.from({ length: 100 }, function (_, k) { return createNewUser(k + 1); });\n        // Assign the data to the data source for the table to render\n        this.dataSource = new MatTableDataSource(users);\n    }\n    /**\n     * @return {?}\n     */\n    TableOverviewExample.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n        };\n    /**\n     * @param {?} filterValue\n     * @return {?}\n     */\n    TableOverviewExample.prototype.applyFilter = /**\n     * @param {?} filterValue\n     * @return {?}\n     */\n        function (filterValue) {\n            this.dataSource.filter = filterValue.trim().toLowerCase();\n            if (this.dataSource.paginator) {\n                this.dataSource.paginator.firstPage();\n            }\n        };\n    return TableOverviewExample;\n}());\n/**\n * Builds and returns a new User.\n * @param {?} id\n * @return {?}\n */\nfunction createNewUser(id) {\n    var /** @type {?} */ name = NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\n    return {\n        id: id.toString(),\n        name: name,\n        progress: Math.round(Math.random() * 100).toString(),\n        color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\n    };\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Table with pagination\n */\nvar TablePaginationExample = /*@__PURE__*/ (function () {\n    function TablePaginationExample() {\n        this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n        this.dataSource = new MatTableDataSource(ELEMENT_DATA$7);\n    }\n    /**\n     * @return {?}\n     */\n    TablePaginationExample.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.dataSource.paginator = this.paginator;\n        };\n    return TablePaginationExample;\n}());\nvar /** @type {?} */ ELEMENT_DATA$7 = [\n    { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n    { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n    { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n    { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n    { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n    { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n    { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n    { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n    { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n    { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n    { position: 11, name: 'Sodium', weight: 22.9897, symbol: 'Na' },\n    { position: 12, name: 'Magnesium', weight: 24.305, symbol: 'Mg' },\n    { position: 13, name: 'Aluminum', weight: 26.9815, symbol: 'Al' },\n    { position: 14, name: 'Silicon', weight: 28.0855, symbol: 'Si' },\n    { position: 15, name: 'Phosphorus', weight: 30.9738, symbol: 'P' },\n    { position: 16, name: 'Sulfur', weight: 32.065, symbol: 'S' },\n    { position: 17, name: 'Chlorine', weight: 35.453, symbol: 'Cl' },\n    { position: 18, name: 'Argon', weight: 39.948, symbol: 'Ar' },\n    { position: 19, name: 'Potassium', weight: 39.0983, symbol: 'K' },\n    { position: 20, name: 'Calcium', weight: 40.078, symbol: 'Ca' },\n];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Table showing each row context properties.\n */\nvar TableRowContextExample = /*@__PURE__*/ (function () {\n    function TableRowContextExample() {\n        this.displayedColumns = ['$implicit', 'index', 'count', 'first', 'last', 'even', 'odd'];\n        this.data = ['one', 'two', 'three', 'four', 'five'];\n    }\n    return TableRowContextExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ ELEMENT_DATA$8 = [\n    { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n    { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n    { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n    { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n    { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n    { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n    { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n    { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n    { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n    { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n];\n/**\n * \\@title Table with selection\n */\nvar TableSelectionExample = /*@__PURE__*/ (function () {\n    function TableSelectionExample() {\n        this.displayedColumns = ['select', 'position', 'name', 'weight', 'symbol'];\n        this.dataSource = new MatTableDataSource(ELEMENT_DATA$8);\n        this.selection = new SelectionModel(true, []);\n    }\n    /** Whether the number of selected elements matches the total number of rows. */\n    /**\n     * Whether the number of selected elements matches the total number of rows.\n     * @return {?}\n     */\n    TableSelectionExample.prototype.isAllSelected = /**\n     * Whether the number of selected elements matches the total number of rows.\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ numSelected = this.selection.selected.length;\n            var /** @type {?} */ numRows = this.dataSource.data.length;\n            return numSelected === numRows;\n        };\n    /** Selects all rows if they are not all selected; otherwise clear selection. */\n    /**\n     * Selects all rows if they are not all selected; otherwise clear selection.\n     * @return {?}\n     */\n    TableSelectionExample.prototype.masterToggle = /**\n     * Selects all rows if they are not all selected; otherwise clear selection.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.isAllSelected() ?\n                this.selection.clear() :\n                this.dataSource.data.forEach(function (row) { return _this.selection.select(row); });\n        };\n    return TableSelectionExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ ELEMENT_DATA$9 = [\n    { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n    { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n    { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n    { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n    { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n    { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n    { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n    { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n    { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n    { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n];\n/**\n * \\@title Table with sorting\n */\nvar TableSortingExample = /*@__PURE__*/ (function () {\n    function TableSortingExample() {\n        this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n        this.dataSource = new MatTableDataSource(ELEMENT_DATA$9);\n    }\n    /**\n     * @return {?}\n     */\n    TableSortingExample.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.dataSource.sort = this.sort;\n        };\n    return TableSortingExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Table with a sticky columns\n */\nvar TableStickyColumnsExample = /*@__PURE__*/ (function () {\n    function TableStickyColumnsExample() {\n        this.displayedColumns = ['name', 'position', 'weight', 'symbol', 'position', 'weight', 'symbol', 'star'];\n        this.dataSource = ELEMENT_DATA$10;\n    }\n    return TableStickyColumnsExample;\n}());\nvar /** @type {?} */ ELEMENT_DATA$10 = [\n    { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n    { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n    { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n    { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n    { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n    { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n    { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n    { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n    { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n    { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Flex-layout tables with toggle-able sticky headers, footers, and columns\n */\nvar TableStickyComplexFlexExample = /*@__PURE__*/ (function () {\n    function TableStickyComplexFlexExample() {\n        this.displayedColumns = [];\n        this.dataSource = ELEMENT_DATA$11;\n        this.tables = [0];\n        this.displayedColumns.length = 24;\n        this.displayedColumns.fill('filler');\n        // The first two columns should be position and name; the last two columns: weight, symbol\n        this.displayedColumns[0] = 'position';\n        this.displayedColumns[1] = 'name';\n        this.displayedColumns[22] = 'weight';\n        this.displayedColumns[23] = 'symbol';\n    }\n    /** Whether the button toggle group contains the id as an active value. */\n    /**\n     * Whether the button toggle group contains the id as an active value.\n     * @param {?} buttonToggleGroup\n     * @param {?} id\n     * @return {?}\n     */\n    TableStickyComplexFlexExample.prototype.isSticky = /**\n     * Whether the button toggle group contains the id as an active value.\n     * @param {?} buttonToggleGroup\n     * @param {?} id\n     * @return {?}\n     */\n        function (buttonToggleGroup, id) {\n            return (buttonToggleGroup.value || []).indexOf(id) !== -1;\n        };\n    return TableStickyComplexFlexExample;\n}());\nvar /** @type {?} */ ELEMENT_DATA$11 = [\n    { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n    { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n    { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n    { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n    { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n    { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n    { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n    { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n    { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n    { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Tables with toggle-able sticky headers, footers, and columns\n */\nvar TableStickyComplexExample = /*@__PURE__*/ (function () {\n    function TableStickyComplexExample() {\n        this.displayedColumns = [];\n        this.dataSource = ELEMENT_DATA$12;\n        this.tables = [0];\n        this.displayedColumns.length = 24;\n        this.displayedColumns.fill('filler');\n        // The first two columns should be position and name; the last two columns: weight, symbol\n        this.displayedColumns[0] = 'position';\n        this.displayedColumns[1] = 'name';\n        this.displayedColumns[22] = 'weight';\n        this.displayedColumns[23] = 'symbol';\n    }\n    /** Whether the button toggle group contains the id as an active value. */\n    /**\n     * Whether the button toggle group contains the id as an active value.\n     * @param {?} buttonToggleGroup\n     * @param {?} id\n     * @return {?}\n     */\n    TableStickyComplexExample.prototype.isSticky = /**\n     * Whether the button toggle group contains the id as an active value.\n     * @param {?} buttonToggleGroup\n     * @param {?} id\n     * @return {?}\n     */\n        function (buttonToggleGroup, id) {\n            return (buttonToggleGroup.value || []).indexOf(id) !== -1;\n        };\n    return TableStickyComplexExample;\n}());\nvar /** @type {?} */ ELEMENT_DATA$12 = [\n    { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n    { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n    { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n    { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n    { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n    { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n    { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n    { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n    { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n    { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Table with a sticky footer\n */\nvar TableStickyFooterExample = /*@__PURE__*/ (function () {\n    function TableStickyFooterExample() {\n        this.displayedColumns = ['item', 'cost'];\n        this.transactions = [\n            { item: 'Beach ball', cost: 4 },\n            { item: 'Towel', cost: 5 },\n            { item: 'Frisbee', cost: 2 },\n            { item: 'Sunscreen', cost: 4 },\n            { item: 'Cooler', cost: 25 },\n            { item: 'Swim suit', cost: 15 },\n        ];\n    }\n    /** Gets the total cost of all transactions. */\n    /**\n     * Gets the total cost of all transactions.\n     * @return {?}\n     */\n    TableStickyFooterExample.prototype.getTotalCost = /**\n     * Gets the total cost of all transactions.\n     * @return {?}\n     */\n        function () {\n            return this.transactions.map(function (t) { return t.cost; }).reduce(function (acc, value) { return acc + value; }, 0);\n        };\n    return TableStickyFooterExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Table with sticky header\n */\nvar TableStickyHeaderExample = /*@__PURE__*/ (function () {\n    function TableStickyHeaderExample() {\n        this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n        this.dataSource = ELEMENT_DATA$13;\n    }\n    return TableStickyHeaderExample;\n}());\nvar /** @type {?} */ ELEMENT_DATA$13 = [\n    { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n    { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n    { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n    { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n    { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n    { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n    { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n    { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n    { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n    { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Monitoring autofill state with cdkAutofill\n */\nvar TextFieldAutofillDirectiveExample = /*@__PURE__*/ (function () {\n    function TextFieldAutofillDirectiveExample() {\n    }\n    return TextFieldAutofillDirectiveExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Monitoring autofill state with AutofillMonitor\n */\nvar TextFieldAutofillMonitorExample = /*@__PURE__*/ (function () {\n    function TextFieldAutofillMonitorExample(autofill) {\n        this.autofill = autofill;\n    }\n    /**\n     * @return {?}\n     */\n    TextFieldAutofillMonitorExample.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.autofill.monitor(this.firstName.nativeElement)\n                .subscribe(function (e) { return _this.firstNameAutofilled = e.isAutofilled; });\n            this.autofill.monitor(this.lastName.nativeElement)\n                .subscribe(function (e) { return _this.lastNameAutofilled = e.isAutofilled; });\n        };\n    /**\n     * @return {?}\n     */\n    TextFieldAutofillMonitorExample.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.autofill.stopMonitoring(this.firstName.nativeElement);\n            this.autofill.stopMonitoring(this.lastName.nativeElement);\n        };\n    return TextFieldAutofillMonitorExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Auto-resizing textarea\n */\nvar TextFieldAutosizeTextareaExample = /*@__PURE__*/ (function () {\n    function TextFieldAutosizeTextareaExample(ngZone) {\n        this.ngZone = ngZone;\n    }\n    /**\n     * @return {?}\n     */\n    TextFieldAutosizeTextareaExample.prototype.triggerResize = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            // Wait for changes to be applied, then trigger textarea resize.\n            this.ngZone.onStable.pipe(take(1))\n                .subscribe(function () { return _this.autosize.resizeToFitContent(true); });\n        };\n    return TextFieldAutosizeTextareaExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Multi-row toolbar\n */\nvar ToolbarMultirowExample = /*@__PURE__*/ (function () {\n    function ToolbarMultirowExample() {\n    }\n    return ToolbarMultirowExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic toolbar\n */\nvar ToolbarOverviewExample = /*@__PURE__*/ (function () {\n    function ToolbarOverviewExample() {\n    }\n    return ToolbarOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Tooltip that demonstrates auto-hiding when it clips out of its scrolling container.\n */\nvar TooltipAutoHideExample = /*@__PURE__*/ (function () {\n    function TooltipAutoHideExample() {\n        this.positionOptions = ['below', 'above', 'left', 'right'];\n        this.position = new FormControl(this.positionOptions[0]);\n    }\n    return TooltipAutoHideExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Tooltip that can have a custom class applied.\n */\nvar TooltipCustomClassExample = /*@__PURE__*/ (function () {\n    function TooltipCustomClassExample() {\n    }\n    return TooltipCustomClassExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Tooltip with a show and hide delay\n */\nvar TooltipDelayExample = /*@__PURE__*/ (function () {\n    function TooltipDelayExample() {\n        this.showDelay = new FormControl(1000);\n        this.hideDelay = new FormControl(2000);\n    }\n    return TooltipDelayExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Tooltip that can be disabled\n */\nvar TooltipDisabledExample = /*@__PURE__*/ (function () {\n    function TooltipDisabledExample() {\n        this.disabled = new FormControl(false);\n    }\n    return TooltipDisabledExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Tooltip that can be manually shown/hidden.\n */\nvar TooltipManualExample = /*@__PURE__*/ (function () {\n    function TooltipManualExample() {\n    }\n    return TooltipManualExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Tooltip with a changing message\n */\nvar TooltipMessageExample = /*@__PURE__*/ (function () {\n    function TooltipMessageExample() {\n        this.message = new FormControl('Info about the action');\n    }\n    return TooltipMessageExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Custom options the configure the tooltip's default show/hide delays.\n */\nvar /** @type {?} */ myCustomTooltipDefaults = {\n    showDelay: 1000,\n    hideDelay: 1000,\n    touchendHideDelay: 1000,\n};\n/**\n * \\@title Tooltip with a show and hide delay\n */\nvar TooltipModifiedDefaultsExample = /*@__PURE__*/ (function () {\n    function TooltipModifiedDefaultsExample() {\n    }\n    return TooltipModifiedDefaultsExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Basic tooltip\n */\nvar TooltipOverviewExample = /*@__PURE__*/ (function () {\n    function TooltipOverviewExample() {\n    }\n    return TooltipOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@title Tooltip with a custom position\n */\nvar TooltipPositionExample = /*@__PURE__*/ (function () {\n    function TooltipPositionExample() {\n        this.positionOptions = ['after', 'before', 'above', 'below', 'left', 'right'];\n        this.position = new FormControl(this.positionOptions[0]);\n    }\n    return TooltipPositionExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Node for to-do item\n */\nvar /**\n * Node for to-do item\n */ TodoItemNode = /*@__PURE__*/ (function () {\n    function TodoItemNode() {\n    }\n    return TodoItemNode;\n}());\n/**\n * Flat to-do item node with expandable and level information\n */\nvar /**\n * Flat to-do item node with expandable and level information\n */ TodoItemFlatNode = /*@__PURE__*/ (function () {\n    function TodoItemFlatNode() {\n    }\n    return TodoItemFlatNode;\n}());\n/**\n * The Json object for to-do list data.\n */\nvar /** @type {?} */ TREE_DATA$2 = {\n    Groceries: {\n        'Almond Meal flour': null,\n        'Organic eggs': null,\n        'Protein Powder': null,\n        Fruits: {\n            Apple: null,\n            Berries: ['Blueberry', 'Raspberry'],\n            Orange: null\n        }\n    },\n    Reminders: [\n        'Cook dinner',\n        'Read the Material Design spec',\n        'Upgrade Application to Angular'\n    ]\n};\n/**\n * Checklist database, it can build a tree structured Json object.\n * Each node in Json object represents a to-do item or a category.\n * If a node is a category, it has children items and new items can be added under the category.\n */\nvar ChecklistDatabase = /*@__PURE__*/ (function () {\n    function ChecklistDatabase() {\n        this.dataChange = new BehaviorSubject([]);\n        this.initialize();\n    }\n    Object.defineProperty(ChecklistDatabase.prototype, \"data\", {\n        get: /**\n         * @return {?}\n         */ function () { return this.dataChange.value; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ChecklistDatabase.prototype.initialize = /**\n     * @return {?}\n     */\n        function () {\n            // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\n            //     file node as children.\n            var /** @type {?} */ data = this.buildFileTree(TREE_DATA$2, 0);\n            // Notify the change.\n            this.dataChange.next(data);\n        };\n    /**\n     * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n     * The return value is the list of `TodoItemNode`.\n     */\n    /**\n     * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n     * The return value is the list of `TodoItemNode`.\n     * @param {?} obj\n     * @param {?} level\n     * @return {?}\n     */\n    ChecklistDatabase.prototype.buildFileTree = /**\n     * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n     * The return value is the list of `TodoItemNode`.\n     * @param {?} obj\n     * @param {?} level\n     * @return {?}\n     */\n        function (obj, level) {\n            var _this = this;\n            return Object.keys(obj).reduce(function (accumulator, key) {\n                var /** @type {?} */ value = obj[key];\n                var /** @type {?} */ node = new TodoItemNode();\n                node.item = key;\n                if (value != null) {\n                    if (typeof value === 'object') {\n                        node.children = _this.buildFileTree(value, level + 1);\n                    }\n                    else {\n                        node.item = value;\n                    }\n                }\n                return accumulator.concat(node);\n            }, []);\n        };\n    /** Add an item to to-do list */\n    /**\n     * Add an item to to-do list\n     * @param {?} parent\n     * @param {?} name\n     * @return {?}\n     */\n    ChecklistDatabase.prototype.insertItem = /**\n     * Add an item to to-do list\n     * @param {?} parent\n     * @param {?} name\n     * @return {?}\n     */\n        function (parent, name) {\n            if (parent.children) {\n                parent.children.push(/** @type {?} */ ({ item: name }));\n                this.dataChange.next(this.data);\n            }\n        };\n    /**\n     * @param {?} node\n     * @param {?} name\n     * @return {?}\n     */\n    ChecklistDatabase.prototype.updateItem = /**\n     * @param {?} node\n     * @param {?} name\n     * @return {?}\n     */\n        function (node, name) {\n            node.item = name;\n            this.dataChange.next(this.data);\n        };\n    return ChecklistDatabase;\n}());\n/**\n * \\@title Tree with checkboxes\n */\nvar TreeChecklistExample = /*@__PURE__*/ (function () {\n    function TreeChecklistExample(database) {\n        var _this = this;\n        this.database = database;\n        /**\n         * Map from flat node to nested node. This helps us finding the nested node to be modified\n         */\n        this.flatNodeMap = new Map();\n        /**\n         * Map from nested node to flattened node. This helps us to keep the same object for selection\n         */\n        this.nestedNodeMap = new Map();\n        /**\n         * A selected parent node to be inserted\n         */\n        this.selectedParent = null;\n        /**\n         * The new item's name\n         */\n        this.newItemName = '';\n        /**\n         * The selection for checklist\n         */\n        this.checklistSelection = new SelectionModel(true /* multiple */);\n        this.getLevel = function (node) { return node.level; };\n        this.isExpandable = function (node) { return node.expandable; };\n        this.getChildren = function (node) { return node.children; };\n        this.hasChild = function (_, _nodeData) { return _nodeData.expandable; };\n        this.hasNoContent = function (_, _nodeData) { return _nodeData.item === ''; };\n        /**\n         * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\n         */\n        this.transformer = function (node, level) {\n            var /** @type {?} */ existingNode = _this.nestedNodeMap.get(node);\n            var /** @type {?} */ flatNode = existingNode && existingNode.item === node.item\n                ? existingNode\n                : new TodoItemFlatNode();\n            flatNode.item = node.item;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            _this.flatNodeMap.set(flatNode, node);\n            _this.nestedNodeMap.set(node, flatNode);\n            return flatNode;\n        };\n        this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);\n        this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        database.dataChange.subscribe(function (data) {\n            _this.dataSource.data = data;\n        });\n    }\n    /** Whether all the descendants of the node are selected */\n    /**\n     * Whether all the descendants of the node are selected\n     * @param {?} node\n     * @return {?}\n     */\n    TreeChecklistExample.prototype.descendantsAllSelected = /**\n     * Whether all the descendants of the node are selected\n     * @param {?} node\n     * @return {?}\n     */\n        function (node) {\n            var _this = this;\n            var /** @type {?} */ descendants = this.treeControl.getDescendants(node);\n            return descendants.every(function (child) { return _this.checklistSelection.isSelected(child); });\n        };\n    /** Whether part of the descendants are selected */\n    /**\n     * Whether part of the descendants are selected\n     * @param {?} node\n     * @return {?}\n     */\n    TreeChecklistExample.prototype.descendantsPartiallySelected = /**\n     * Whether part of the descendants are selected\n     * @param {?} node\n     * @return {?}\n     */\n        function (node) {\n            var _this = this;\n            var /** @type {?} */ descendants = this.treeControl.getDescendants(node);\n            var /** @type {?} */ result = descendants.some(function (child) { return _this.checklistSelection.isSelected(child); });\n            return result && !this.descendantsAllSelected(node);\n        };\n    /** Toggle the to-do item selection. Select/deselect all the descendants node */\n    /**\n     * Toggle the to-do item selection. Select/deselect all the descendants node\n     * @param {?} node\n     * @return {?}\n     */\n    TreeChecklistExample.prototype.todoItemSelectionToggle = /**\n     * Toggle the to-do item selection. Select/deselect all the descendants node\n     * @param {?} node\n     * @return {?}\n     */\n        function (node) {\n            this.checklistSelection.toggle(node);\n            var /** @type {?} */ descendants = this.treeControl.getDescendants(node);\n            this.checklistSelection.isSelected(node)\n                ? (_a = this.checklistSelection).select.apply(_a, descendants) : (_b = this.checklistSelection).deselect.apply(_b, descendants);\n            var _a, _b;\n        };\n    /** Select the category so we can insert the new item. */\n    /**\n     * Select the category so we can insert the new item.\n     * @param {?} node\n     * @return {?}\n     */\n    TreeChecklistExample.prototype.addNewItem = /**\n     * Select the category so we can insert the new item.\n     * @param {?} node\n     * @return {?}\n     */\n        function (node) {\n            var /** @type {?} */ parentNode = this.flatNodeMap.get(node);\n            this.database.insertItem(/** @type {?} */ ((parentNode)), '');\n            this.treeControl.expand(node);\n        };\n    /** Save the node to database */\n    /**\n     * Save the node to database\n     * @param {?} node\n     * @param {?} itemValue\n     * @return {?}\n     */\n    TreeChecklistExample.prototype.saveNode = /**\n     * Save the node to database\n     * @param {?} node\n     * @param {?} itemValue\n     * @return {?}\n     */\n        function (node, itemValue) {\n            var /** @type {?} */ nestedNode = this.flatNodeMap.get(node);\n            this.database.updateItem(/** @type {?} */ ((nestedNode)), itemValue);\n        };\n    return TreeChecklistExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Flat node with expandable and level information\n */\nvar /**\n * Flat node with expandable and level information\n */ DynamicFlatNode = /*@__PURE__*/ (function () {\n    function DynamicFlatNode(item, level, expandable, isLoading) {\n        if (level === void 0) {\n            level = 1;\n        }\n        if (expandable === void 0) {\n            expandable = false;\n        }\n        if (isLoading === void 0) {\n            isLoading = false;\n        }\n        this.item = item;\n        this.level = level;\n        this.expandable = expandable;\n        this.isLoading = isLoading;\n    }\n    return DynamicFlatNode;\n}());\n/**\n * Database for dynamic data. When expanding a node in the tree, the data source will need to fetch\n * the descendants data from the database.\n */\nvar /**\n * Database for dynamic data. When expanding a node in the tree, the data source will need to fetch\n * the descendants data from the database.\n */ DynamicDatabase = /*@__PURE__*/ (function () {\n    function DynamicDatabase() {\n        this.dataMap = new Map([\n            ['Fruits', ['Apple', 'Orange', 'Banana']],\n            ['Vegetables', ['Tomato', 'Potato', 'Onion']],\n            ['Apple', ['Fuji', 'Macintosh']],\n            ['Onion', ['Yellow', 'White', 'Purple']]\n        ]);\n        this.rootLevelNodes = ['Fruits', 'Vegetables'];\n    }\n    /** Initial data from database */\n    /**\n     * Initial data from database\n     * @return {?}\n     */\n    DynamicDatabase.prototype.initialData = /**\n     * Initial data from database\n     * @return {?}\n     */\n        function () {\n            return this.rootLevelNodes.map(function (name) { return new DynamicFlatNode(name, 0, true); });\n        };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DynamicDatabase.prototype.getChildren = /**\n     * @param {?} node\n     * @return {?}\n     */\n        function (node) {\n            return this.dataMap.get(node);\n        };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DynamicDatabase.prototype.isExpandable = /**\n     * @param {?} node\n     * @return {?}\n     */\n        function (node) {\n            return this.dataMap.has(node);\n        };\n    return DynamicDatabase;\n}());\n/**\n * File database, it can build a tree structured Json object from string.\n * Each node in Json object represents a file or a directory. For a file, it has filename and type.\n * For a directory, it has filename and children (a list of files or directories).\n * The input will be a json object string, and the output is a list of `FileNode` with nested\n * structure.\n */\nvar DynamicDataSource = /*@__PURE__*/ (function () {\n    function DynamicDataSource(treeControl, database) {\n        this.treeControl = treeControl;\n        this.database = database;\n        this.dataChange = new BehaviorSubject([]);\n    }\n    Object.defineProperty(DynamicDataSource.prototype, \"data\", {\n        get: /**\n         * @return {?}\n         */ function () { return this.dataChange.value; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.treeControl.dataNodes = value;\n            this.dataChange.next(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    DynamicDataSource.prototype.connect = /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n        function (collectionViewer) {\n            var _this = this;\n            /** @type {?} */ ((this.treeControl.expansionModel.onChange)).subscribe(function (change) {\n                if (((change)).added ||\n                    ((change)).removed) {\n                    _this.handleTreeControl(/** @type {?} */ (change));\n                }\n            });\n            return merge(collectionViewer.viewChange, this.dataChange).pipe(map(function () { return _this.data; }));\n        };\n    /** Handle expand/collapse behaviors */\n    /**\n     * Handle expand/collapse behaviors\n     * @param {?} change\n     * @return {?}\n     */\n    DynamicDataSource.prototype.handleTreeControl = /**\n     * Handle expand/collapse behaviors\n     * @param {?} change\n     * @return {?}\n     */\n        function (change) {\n            var _this = this;\n            if (change.added) {\n                change.added.forEach(function (node) { return _this.toggleNode(node, true); });\n            }\n            if (change.removed) {\n                change.removed.slice().reverse().forEach(function (node) { return _this.toggleNode(node, false); });\n            }\n        };\n    /**\n     * Toggle the node, remove from display list\n     */\n    /**\n     * Toggle the node, remove from display list\n     * @param {?} node\n     * @param {?} expand\n     * @return {?}\n     */\n    DynamicDataSource.prototype.toggleNode = /**\n     * Toggle the node, remove from display list\n     * @param {?} node\n     * @param {?} expand\n     * @return {?}\n     */\n        function (node, expand) {\n            var _this = this;\n            var /** @type {?} */ children = this.database.getChildren(node.item);\n            var /** @type {?} */ index = this.data.indexOf(node);\n            if (!children || index < 0) {\n                // If no children, or cannot find the node, no op\n                return;\n            }\n            node.isLoading = true;\n            setTimeout(function () {\n                if (expand) {\n                    var /** @type {?} */ nodes = children.map(function (name) {\n                        return new DynamicFlatNode(name, node.level + 1, _this.database.isExpandable(name));\n                    });\n                    (_a = _this.data).splice.apply(_a, [index + 1, 0].concat(nodes));\n                }\n                else {\n                    var /** @type {?} */ count = 0;\n                    for (var /** @type {?} */ i = index + 1; i < _this.data.length\n                        && _this.data[i].level > node.level; i++, count++) { }\n                    _this.data.splice(index + 1, count);\n                }\n                // notify the change\n                // notify the change\n                _this.dataChange.next(_this.data);\n                node.isLoading = false;\n                var _a;\n            }, 1000);\n        };\n    return DynamicDataSource;\n}());\n/**\n * \\@title Tree with dynamic data\n */\nvar TreeDynamicExample = /*@__PURE__*/ (function () {\n    function TreeDynamicExample(database) {\n        this.getLevel = function (node) { return node.level; };\n        this.isExpandable = function (node) { return node.expandable; };\n        this.hasChild = function (_, _nodeData) { return _nodeData.expandable; };\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);\n        this.dataSource = new DynamicDataSource(this.treeControl, database);\n        this.dataSource.data = database.initialData();\n    }\n    return TreeDynamicExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * File node data with nested structure.\n * Each node has a filename, and a type or a list of children.\n */\nvar /**\n * File node data with nested structure.\n * Each node has a filename, and a type or a list of children.\n */ FileNode$2 = (function () {\n    function FileNode() {\n    }\n    return FileNode;\n}());\n/**\n * Flat node with expandable and level information\n */\nvar /**\n * Flat node with expandable and level information\n */ FileFlatNode$1 = (function () {\n    function FileFlatNode(expandable, filename, level, type) {\n        this.expandable = expandable;\n        this.filename = filename;\n        this.level = level;\n        this.type = type;\n    }\n    return FileFlatNode;\n}());\n/**\n * The file structure tree data in string. The data could be parsed into a Json object\n */\nvar /** @type {?} */ TREE_DATA$3 = JSON.stringify({\n    Applications: {\n        Calendar: 'app',\n        Chrome: 'app',\n        Webstorm: 'app'\n    },\n    Documents: {\n        angular: {\n            src: {\n                compiler: 'ts',\n                core: 'ts'\n            }\n        },\n        material2: {\n            src: {\n                button: 'ts',\n                checkbox: 'ts',\n                input: 'ts'\n            }\n        }\n    },\n    Downloads: {\n        October: 'pdf',\n        November: 'pdf',\n        Tutorial: 'html'\n    },\n    Pictures: {\n        'Photo Booth Library': {\n            Contents: 'dir',\n            Pictures: 'dir'\n        },\n        Sun: 'png',\n        Woods: 'jpg'\n    }\n});\n/**\n * File database, it can build a tree structured Json object from string.\n * Each node in Json object represents a file or a directory. For a file, it has filename and type.\n * For a directory, it has filename and children (a list of files or directories).\n * The input will be a json object string, and the output is a list of `FileNode` with nested\n * structure.\n */\nvar FileDatabase$2 = (function () {\n    function FileDatabase() {\n        this.dataChange = new BehaviorSubject([]);\n        this.initialize();\n    }\n    Object.defineProperty(FileDatabase.prototype, \"data\", {\n        get: /**\n         * @return {?}\n         */ function () { return this.dataChange.value; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FileDatabase.prototype.initialize = /**\n     * @return {?}\n     */\n        function () {\n            // Parse the string to json object.\n            var /** @type {?} */ dataObject = JSON.parse(TREE_DATA$3);\n            // Build the tree nodes from Json object. The result is a list of `FileNode` with nested\n            //     file node as children.\n            var /** @type {?} */ data = this.buildFileTree(dataObject, 0);\n            // Notify the change.\n            this.dataChange.next(data);\n        };\n    /**\n     * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n     * The return value is the list of `FileNode`.\n     */\n    /**\n     * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n     * The return value is the list of `FileNode`.\n     * @param {?} obj\n     * @param {?} level\n     * @return {?}\n     */\n    FileDatabase.prototype.buildFileTree = /**\n     * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n     * The return value is the list of `FileNode`.\n     * @param {?} obj\n     * @param {?} level\n     * @return {?}\n     */\n        function (obj, level) {\n            var _this = this;\n            return Object.keys(obj).reduce(function (accumulator, key) {\n                var /** @type {?} */ value = obj[key];\n                var /** @type {?} */ node = new FileNode$2();\n                node.filename = key;\n                if (value != null) {\n                    if (typeof value === 'object') {\n                        node.children = _this.buildFileTree(value, level + 1);\n                    }\n                    else {\n                        node.type = value;\n                    }\n                }\n                return accumulator.concat(node);\n            }, []);\n        };\n    return FileDatabase;\n}());\n/**\n * \\@title Tree with flat nodes\n */\nvar TreeFlatOverviewExample = /*@__PURE__*/ (function () {\n    function TreeFlatOverviewExample(database) {\n        var _this = this;\n        this.transformer = function (node, level) {\n            return new FileFlatNode$1(!!node.children, node.filename, level, node.type);\n        };\n        this._getLevel = function (node) { return node.level; };\n        this._isExpandable = function (node) { return node.expandable; };\n        this._getChildren = function (node) { return of(node.children); };\n        this.hasChild = function (_, _nodeData) { return _nodeData.expandable; };\n        this.treeFlattener = new MatTreeFlattener(this.transformer, this._getLevel, this._isExpandable, this._getChildren);\n        this.treeControl = new FlatTreeControl(this._getLevel, this._isExpandable);\n        this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        database.dataChange.subscribe(function (data) { return _this.dataSource.data = data; });\n    }\n    return TreeFlatOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ LOAD_MORE = 'LOAD_MORE';\n/**\n * Nested node\n */\nvar /**\n * Nested node\n */ LoadmoreNode = /*@__PURE__*/ (function () {\n    function LoadmoreNode(item, hasChildren, loadMoreParentItem) {\n        if (hasChildren === void 0) {\n            hasChildren = false;\n        }\n        if (loadMoreParentItem === void 0) {\n            loadMoreParentItem = null;\n        }\n        this.item = item;\n        this.hasChildren = hasChildren;\n        this.loadMoreParentItem = loadMoreParentItem;\n        this.childrenChange = new BehaviorSubject([]);\n    }\n    Object.defineProperty(LoadmoreNode.prototype, \"children\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.childrenChange.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return LoadmoreNode;\n}());\n/**\n * Flat node with expandable and level information\n */\nvar /**\n * Flat node with expandable and level information\n */ LoadmoreFlatNode = /*@__PURE__*/ (function () {\n    function LoadmoreFlatNode(item, level, expandable, loadMoreParentItem) {\n        if (level === void 0) {\n            level = 1;\n        }\n        if (expandable === void 0) {\n            expandable = false;\n        }\n        if (loadMoreParentItem === void 0) {\n            loadMoreParentItem = null;\n        }\n        this.item = item;\n        this.level = level;\n        this.expandable = expandable;\n        this.loadMoreParentItem = loadMoreParentItem;\n    }\n    return LoadmoreFlatNode;\n}());\n/**\n * A database that only load part of the data initially. After user clicks on the `Load more`\n * button, more data will be loaded.\n */\nvar LoadmoreDatabase = /*@__PURE__*/ (function () {\n    function LoadmoreDatabase() {\n        this.batchNumber = 5;\n        this.dataChange = new BehaviorSubject([]);\n        this.nodeMap = new Map();\n        /**\n         * The data\n         */\n        this.rootLevelNodes = ['Vegetables', 'Fruits'];\n        this.dataMap = new Map([\n            ['Fruits', ['Apple', 'Orange', 'Banana']],\n            ['Vegetables', ['Tomato', 'Potato', 'Onion']],\n            ['Apple', ['Fuji', 'Macintosh']],\n            ['Onion', ['Yellow', 'White', 'Purple', 'Green', 'Shallot', 'Sweet', 'Red', 'Leek']],\n        ]);\n    }\n    /**\n     * @return {?}\n     */\n    LoadmoreDatabase.prototype.initialize = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            var /** @type {?} */ data = this.rootLevelNodes.map(function (name) { return _this._generateNode(name); });\n            this.dataChange.next(data);\n        };\n    /** Expand a node whose children are not loaded */\n    /**\n     * Expand a node whose children are not loaded\n     * @param {?} item\n     * @param {?=} onlyFirstTime\n     * @return {?}\n     */\n    LoadmoreDatabase.prototype.loadMore = /**\n     * Expand a node whose children are not loaded\n     * @param {?} item\n     * @param {?=} onlyFirstTime\n     * @return {?}\n     */\n        function (item, onlyFirstTime) {\n            var _this = this;\n            if (onlyFirstTime === void 0) {\n                onlyFirstTime = false;\n            }\n            if (!this.nodeMap.has(item) || !this.dataMap.has(item)) {\n                return;\n            }\n            var /** @type {?} */ parent = ((this.nodeMap.get(item)));\n            var /** @type {?} */ children = ((this.dataMap.get(item)));\n            if (onlyFirstTime && /** @type {?} */ ((parent.children)).length > 0) {\n                return;\n            }\n            var /** @type {?} */ newChildrenNumber = ((parent.children)).length + this.batchNumber;\n            var /** @type {?} */ nodes = children.slice(0, newChildrenNumber)\n                .map(function (name) { return _this._generateNode(name); });\n            if (newChildrenNumber < children.length) {\n                // Need a new load more node\n                nodes.push(new LoadmoreNode(LOAD_MORE, false, item));\n            }\n            parent.childrenChange.next(nodes);\n            this.dataChange.next(this.dataChange.value);\n        };\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    LoadmoreDatabase.prototype._generateNode = /**\n     * @param {?} item\n     * @return {?}\n     */\n        function (item) {\n            if (this.nodeMap.has(item)) {\n                return /** @type {?} */ ((this.nodeMap.get(item)));\n            }\n            var /** @type {?} */ result = new LoadmoreNode(item, this.dataMap.has(item));\n            this.nodeMap.set(item, result);\n            return result;\n        };\n    return LoadmoreDatabase;\n}());\n/**\n * \\@title Tree with partially loaded data\n */\nvar TreeLoadmoreExample = /*@__PURE__*/ (function () {\n    function TreeLoadmoreExample(database) {\n        var _this = this;\n        this.database = database;\n        this.nodeMap = new Map();\n        this.getChildren = function (node) { return node.childrenChange; };\n        this.transformer = function (node, level) {\n            var /** @type {?} */ existingNode = _this.nodeMap.get(node.item);\n            if (existingNode) {\n                return existingNode;\n            }\n            var /** @type {?} */ newNode = new LoadmoreFlatNode(node.item, level, node.hasChildren, node.loadMoreParentItem);\n            _this.nodeMap.set(node.item, newNode);\n            return newNode;\n        };\n        this.getLevel = function (node) { return node.level; };\n        this.isExpandable = function (node) { return node.expandable; };\n        this.hasChild = function (_, _nodeData) { return _nodeData.expandable; };\n        this.isLoadMore = function (_, _nodeData) { return _nodeData.item === LOAD_MORE; };\n        this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);\n        this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        database.dataChange.subscribe(function (data) {\n            _this.dataSource.data = data;\n        });\n        database.initialize();\n    }\n    /** Load more nodes from data source */\n    /**\n     * Load more nodes from data source\n     * @param {?} item\n     * @return {?}\n     */\n    TreeLoadmoreExample.prototype.loadMore = /**\n     * Load more nodes from data source\n     * @param {?} item\n     * @return {?}\n     */\n        function (item) {\n            this.database.loadMore(item);\n        };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    TreeLoadmoreExample.prototype.loadChildren = /**\n     * @param {?} node\n     * @return {?}\n     */\n        function (node) {\n            this.database.loadMore(node.item, true);\n        };\n    return TreeLoadmoreExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Json node data with nested structure. Each node has a filename and a value or a list of children\n */\nvar /**\n * Json node data with nested structure. Each node has a filename and a value or a list of children\n */ FileNode$3 = (function () {\n    function FileNode() {\n    }\n    return FileNode;\n}());\n/**\n * The Json tree data in string. The data could be parsed into Json object\n */\nvar /** @type {?} */ TREE_DATA$4 = JSON.stringify({\n    Applications: {\n        Calendar: 'app',\n        Chrome: 'app',\n        Webstorm: 'app'\n    },\n    Documents: {\n        angular: {\n            src: {\n                compiler: 'ts',\n                core: 'ts'\n            }\n        },\n        material2: {\n            src: {\n                button: 'ts',\n                checkbox: 'ts',\n                input: 'ts'\n            }\n        }\n    },\n    Downloads: {\n        October: 'pdf',\n        November: 'pdf',\n        Tutorial: 'html'\n    },\n    Pictures: {\n        'Photo Booth Library': {\n            Contents: 'dir',\n            Pictures: 'dir'\n        },\n        Sun: 'png',\n        Woods: 'jpg'\n    }\n});\n/**\n * File database, it can build a tree structured Json object from string.\n * Each node in Json object represents a file or a directory. For a file, it has filename and type.\n * For a directory, it has filename and children (a list of files or directories).\n * The input will be a json object string, and the output is a list of `FileNode` with nested\n * structure.\n */\nvar FileDatabase$3 = (function () {\n    function FileDatabase() {\n        this.dataChange = new BehaviorSubject([]);\n        this.initialize();\n    }\n    Object.defineProperty(FileDatabase.prototype, \"data\", {\n        get: /**\n         * @return {?}\n         */ function () { return this.dataChange.value; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FileDatabase.prototype.initialize = /**\n     * @return {?}\n     */\n        function () {\n            // Parse the string to json object.\n            var /** @type {?} */ dataObject = JSON.parse(TREE_DATA$4);\n            // Build the tree nodes from Json object. The result is a list of `FileNode` with nested\n            //     file node as children.\n            var /** @type {?} */ data = this.buildFileTree(dataObject, 0);\n            // Notify the change.\n            this.dataChange.next(data);\n        };\n    /**\n     * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n     * The return value is the list of `FileNode`.\n     */\n    /**\n     * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n     * The return value is the list of `FileNode`.\n     * @param {?} obj\n     * @param {?} level\n     * @return {?}\n     */\n    FileDatabase.prototype.buildFileTree = /**\n     * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n     * The return value is the list of `FileNode`.\n     * @param {?} obj\n     * @param {?} level\n     * @return {?}\n     */\n        function (obj, level) {\n            var _this = this;\n            return Object.keys(obj).reduce(function (accumulator, key) {\n                var /** @type {?} */ value = obj[key];\n                var /** @type {?} */ node = new FileNode$3();\n                node.filename = key;\n                if (value != null) {\n                    if (typeof value === 'object') {\n                        node.children = _this.buildFileTree(value, level + 1);\n                    }\n                    else {\n                        node.type = value;\n                    }\n                }\n                return accumulator.concat(node);\n            }, []);\n        };\n    return FileDatabase;\n}());\n/**\n * \\@title Tree with nested nodes\n */\nvar TreeNestedOverviewExample = /*@__PURE__*/ (function () {\n    function TreeNestedOverviewExample(database) {\n        var _this = this;\n        this.hasNestedChild = function (_, nodeData) { return !nodeData.type; };\n        this._getChildren = function (node) { return node.children; };\n        this.nestedTreeControl = new NestedTreeControl(this._getChildren);\n        this.nestedDataSource = new MatTreeNestedDataSource();\n        database.dataChange.subscribe(function (data) { return _this.nestedDataSource.data = data; });\n    }\n    return TreeNestedOverviewExample;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ EXAMPLE_COMPONENTS = {\n    'autocomplete-auto-active-first-option': {\n        title: 'Highlight the first autocomplete option',\n        component: AutocompleteAutoActiveFirstOptionExample\n    },\n    'autocomplete-display': {\n        title: 'Display value autocomplete',\n        component: AutocompleteDisplayExample\n    },\n    'autocomplete-filter': {\n        title: 'Filter autocomplete',\n        component: AutocompleteFilterExample\n    },\n    'autocomplete-optgroup': {\n        title: 'Option groups autocomplete',\n        component: AutocompleteOptgroupExample\n    },\n    'autocomplete-overview': {\n        title: 'Autocomplete overview',\n        component: AutocompleteOverviewExample\n    },\n    'autocomplete-simple': {\n        title: 'Simple autocomplete',\n        component: AutocompleteSimpleExample\n    },\n    'badge-overview': {\n        title: 'Badge overview',\n        component: BadgeOverviewExample\n    },\n    'bottom-sheet-overview': {\n        title: 'Bottom Sheet Overview',\n        component: BottomSheetOverviewExample,\n        additionalFiles: [\"bottom-sheet-overview-example-sheet.html\"],\n        selectorName: 'BottomSheetOverviewExample, BottomSheetOverviewExampleSheet'\n    },\n    'button-overview': {\n        title: 'Basic buttons',\n        component: ButtonOverviewExample\n    },\n    'button-toggle-exclusive': {\n        title: 'Exclusive selection',\n        component: ButtonToggleExclusiveExample\n    },\n    'button-toggle-overview': {\n        title: 'Basic button-toggles',\n        component: ButtonToggleOverviewExample\n    },\n    'button-types': {\n        title: 'Button varieties',\n        component: ButtonTypesExample\n    },\n    'card-fancy': {\n        title: 'Card with multiple sections',\n        component: CardFancyExample\n    },\n    'card-overview': {\n        title: 'Basic cards',\n        component: CardOverviewExample\n    },\n    'cdk-table-basic-flex': {\n        title: 'Basic use of `<cdk-table>` (uses display flex)',\n        component: CdkTableBasicFlexExample\n    },\n    'cdk-table-basic': {\n        title: 'Basic CDK data-table',\n        component: CdkTableBasicExample\n    },\n    'cdk-tree-flat': {\n        title: 'Tree with flat nodes',\n        component: CdkTreeFlatExample\n    },\n    'cdk-tree-nested': {\n        title: 'Tree with nested nodes',\n        component: CdkTreeNestedExample\n    },\n    'checkbox-configurable': {\n        title: 'Configurable checkbox',\n        component: CheckboxConfigurableExample\n    },\n    'checkbox-overview': {\n        title: 'Basic checkboxes',\n        component: CheckboxOverviewExample\n    },\n    'chips-autocomplete': {\n        title: 'Chips Autocomplete',\n        component: ChipsAutocompleteExample\n    },\n    'chips-input': {\n        title: 'Chips with input',\n        component: ChipsInputExample\n    },\n    'chips-overview': {\n        title: 'Basic chips',\n        component: ChipsOverviewExample\n    },\n    'chips-stacked': {\n        title: 'Stacked chips',\n        component: ChipsStackedExample\n    },\n    'datepicker-api': {\n        title: 'Datepicker open method',\n        component: DatepickerApiExample\n    },\n    'datepicker-color': {\n        title: 'Datepicker palette colors',\n        component: DatepickerColorExample\n    },\n    'datepicker-custom-header': {\n        title: 'Datepicker with custom calendar header',\n        component: DatepickerCustomHeaderExample,\n        selectorName: 'DatepickerCustomHeaderExample, ExampleHeader'\n    },\n    'datepicker-custom-icon': {\n        title: 'Datepicker with custom icon',\n        component: DatepickerCustomIconExample\n    },\n    'datepicker-disabled': {\n        title: 'Disabled datepicker',\n        component: DatepickerDisabledExample\n    },\n    'datepicker-events': {\n        title: 'Datepicker input and change events',\n        component: DatepickerEventsExample\n    },\n    'datepicker-filter': {\n        title: 'Datepicker with filter validation',\n        component: DatepickerFilterExample\n    },\n    'datepicker-formats': {\n        title: 'Datepicker with custom formats',\n        component: DatepickerFormatsExample\n    },\n    'datepicker-locale': {\n        title: 'Datepicker with different locale',\n        component: DatepickerLocaleExample\n    },\n    'datepicker-min-max': {\n        title: 'Datepicker with min & max validation',\n        component: DatepickerMinMaxExample\n    },\n    'datepicker-moment': {\n        title: 'Datepicker that uses Moment.js dates',\n        component: DatepickerMomentExample\n    },\n    'datepicker-overview': {\n        title: 'Basic datepicker',\n        component: DatepickerOverviewExample\n    },\n    'datepicker-start-view': {\n        title: 'Datepicker start date',\n        component: DatepickerStartViewExample\n    },\n    'datepicker-touch': {\n        title: 'Datepicker touch UI',\n        component: DatepickerTouchExample\n    },\n    'datepicker-value': {\n        title: 'Datepicker selected value',\n        component: DatepickerValueExample\n    },\n    'datepicker-views-selection': {\n        title: 'Datepicker emulating a Year and month picker',\n        component: DatepickerViewsSelectionExample\n    },\n    'dialog-content': {\n        title: 'Dialog with header, scrollable content and actions',\n        component: DialogContentExample,\n        additionalFiles: [\"dialog-content-example-dialog.html\"],\n        selectorName: 'DialogContentExample, DialogContentExampleDialog'\n    },\n    'dialog-data': {\n        title: 'Injecting data when opening a dialog',\n        component: DialogDataExample,\n        additionalFiles: [\"dialog-data-example-dialog.html\"],\n        selectorName: 'DialogDataExample, DialogDataExampleDialog'\n    },\n    'dialog-elements': {\n        title: 'Dialog elements',\n        component: DialogElementsExample,\n        additionalFiles: [\"dialog-elements-example-dialog.html\"],\n        selectorName: 'DialogElementsExample, DialogElementsExampleDialog'\n    },\n    'dialog-overview': {\n        title: 'Dialog Overview',\n        component: DialogOverviewExample,\n        additionalFiles: [\"dialog-overview-example-dialog.html\"],\n        selectorName: 'DialogOverviewExample, DialogOverviewExampleDialog'\n    },\n    'divider-overview': {\n        title: 'Basic divider',\n        component: DividerOverviewExample\n    },\n    'elevation-overview': {\n        title: 'Elevation CSS classes',\n        component: ElevationOverviewExample\n    },\n    'expansion-expand-collapse-all': {\n        title: 'Accordion with expand/collapse all toggles',\n        component: ExpansionExpandCollapseAllExample\n    },\n    'expansion-overview': {\n        title: 'Basic expansion panel',\n        component: ExpansionOverviewExample\n    },\n    'expansion-steps': {\n        title: 'Expansion panel as accordion',\n        component: ExpansionStepsExample\n    },\n    'focus-monitor-directives': {\n        title: 'Monitoring focus with FocusMonitor',\n        component: FocusMonitorDirectivesExample\n    },\n    'focus-monitor-focus-via': {\n        title: 'Focusing with a specific FocusOrigin',\n        component: FocusMonitorFocusViaExample\n    },\n    'focus-monitor-overview': {\n        title: 'Monitoring focus with FocusMonitor',\n        component: FocusMonitorOverviewExample\n    },\n    'form-field-appearance': {\n        title: 'Form field appearance variants',\n        component: FormFieldAppearanceExample\n    },\n    'form-field-custom-control': {\n        title: 'Form field with custom telephone number input control.',\n        component: FormFieldCustomControlExample,\n        additionalFiles: [\"form-field-custom-control-example.html\"],\n        selectorName: 'FormFieldCustomControlExample, MyTelInput'\n    },\n    'form-field-error': {\n        title: 'Form field with error messages',\n        component: FormFieldErrorExample\n    },\n    'form-field-hint': {\n        title: 'Form field with hints',\n        component: FormFieldHintExample\n    },\n    'form-field-label': {\n        title: 'Form field with label',\n        component: FormFieldLabelExample\n    },\n    'form-field-overview': {\n        title: 'Simple form field',\n        component: FormFieldOverviewExample\n    },\n    'form-field-prefix-suffix': {\n        title: 'Form field with prefix & suffix',\n        component: FormFieldPrefixSuffixExample\n    },\n    'form-field-theming': {\n        title: 'Form field theming',\n        component: FormFieldThemingExample\n    },\n    'grid-list-dynamic': {\n        title: 'Dynamic grid-list',\n        component: GridListDynamicExample\n    },\n    'grid-list-overview': {\n        title: 'Basic grid-list',\n        component: GridListOverviewExample\n    },\n    'icon-overview': {\n        title: 'Basic icons',\n        component: IconOverviewExample\n    },\n    'icon-svg': {\n        title: 'SVG icons',\n        component: IconSvgExample\n    },\n    'input-clearable': {\n        title: 'Input with a clear button',\n        component: InputClearableExample\n    },\n    'input-error-state-matcher': {\n        title: 'Input with a custom ErrorStateMatcher',\n        component: InputErrorStateMatcherExample\n    },\n    'input-errors': {\n        title: 'Input with error messages',\n        component: InputErrorsExample\n    },\n    'input-form': {\n        title: 'Inputs in a form',\n        component: InputFormExample\n    },\n    'input-hint': {\n        title: 'Input with hints',\n        component: InputHintExample\n    },\n    'input-overview': {\n        title: 'Basic Inputs',\n        component: InputOverviewExample\n    },\n    'input-prefix-suffix': {\n        title: 'Inputs with prefixes and suffixes',\n        component: InputPrefixSuffixExample\n    },\n    'list-overview': {\n        title: 'Basic list',\n        component: ListOverviewExample\n    },\n    'list-sections': {\n        title: 'List with sections',\n        component: ListSectionsExample\n    },\n    'list-selection': {\n        title: 'List with selection',\n        component: ListSelectionExample\n    },\n    'menu-icons': {\n        title: 'Menu with icons',\n        component: MenuIconsExample\n    },\n    'menu-overview': {\n        title: 'Basic menu',\n        component: MenuOverviewExample\n    },\n    'nested-menu': {\n        title: 'Nested menu',\n        component: NestedMenuExample\n    },\n    'paginator-configurable': {\n        title: 'Configurable paginator',\n        component: PaginatorConfigurableExample\n    },\n    'paginator-overview': {\n        title: 'Paginator',\n        component: PaginatorOverviewExample\n    },\n    'progress-bar-buffer': {\n        title: 'Buffer progress-bar',\n        component: ProgressBarBufferExample\n    },\n    'progress-bar-configurable': {\n        title: 'Configurable progress-bar',\n        component: ProgressBarConfigurableExample\n    },\n    'progress-bar-determinate': {\n        title: 'Determinate progress-bar',\n        component: ProgressBarDeterminateExample\n    },\n    'progress-bar-indeterminate': {\n        title: 'Indeterminate progress-bar',\n        component: ProgressBarIndeterminateExample\n    },\n    'progress-bar-query': {\n        title: 'Query progress-bar',\n        component: ProgressBarQueryExample\n    },\n    'progress-spinner-configurable': {\n        title: 'Configurable progress spinner',\n        component: ProgressSpinnerConfigurableExample\n    },\n    'progress-spinner-overview': {\n        title: 'Basic progress-spinner',\n        component: ProgressSpinnerOverviewExample\n    },\n    'radio-ng-model': {\n        title: 'Radios with ngModel',\n        component: RadioNgModelExample\n    },\n    'radio-overview': {\n        title: 'Basic radios',\n        component: RadioOverviewExample\n    },\n    'select-custom-trigger': {\n        title: 'Select with custom trigger text',\n        component: SelectCustomTriggerExample\n    },\n    'select-disabled': {\n        title: 'Disabled select',\n        component: SelectDisabledExample\n    },\n    'select-error-state-matcher': {\n        title: 'Select with a custom ErrorStateMatcher',\n        component: SelectErrorStateMatcherExample\n    },\n    'select-form': {\n        title: 'Select in a form',\n        component: SelectFormExample\n    },\n    'select-hint-error': {\n        title: 'Select with form field features',\n        component: SelectHintErrorExample\n    },\n    'select-multiple': {\n        title: 'Select with multiple selection',\n        component: SelectMultipleExample\n    },\n    'select-no-ripple': {\n        title: 'Select with no option ripple',\n        component: SelectNoRippleExample\n    },\n    'select-optgroup': {\n        title: 'Select with option groups',\n        component: SelectOptgroupExample\n    },\n    'select-overview': {\n        title: 'Basic select',\n        component: SelectOverviewExample\n    },\n    'select-panel-class': {\n        title: 'Select with custom panel styling',\n        component: SelectPanelClassExample\n    },\n    'select-reset': {\n        title: 'Select with reset option',\n        component: SelectResetExample\n    },\n    'select-value-binding': {\n        title: 'Select with 2-way value binding',\n        component: SelectValueBindingExample\n    },\n    'sidenav-autosize': {\n        title: 'Autosize sidenav',\n        component: SidenavAutosizeExample\n    },\n    'sidenav-backdrop': {\n        title: 'Drawer with explicit backdrop setting',\n        component: SidenavBackdropExample\n    },\n    'sidenav-disable-close': {\n        title: 'Sidenav with custom escape and backdrop click behavior',\n        component: SidenavDisableCloseExample\n    },\n    'sidenav-drawer-overview': {\n        title: 'Basic drawer',\n        component: SidenavDrawerOverviewExample\n    },\n    'sidenav-fixed': {\n        title: 'Fixed sidenav',\n        component: SidenavFixedExample\n    },\n    'sidenav-mode': {\n        title: 'Sidenav with configurable mode',\n        component: SidenavModeExample\n    },\n    'sidenav-open-close': {\n        title: 'Sidenav open & close behavior',\n        component: SidenavOpenCloseExample\n    },\n    'sidenav-overview': {\n        title: 'Basic sidenav',\n        component: SidenavOverviewExample\n    },\n    'sidenav-position': {\n        title: 'Implicit main content with two sidenavs',\n        component: SidenavPositionExample\n    },\n    'sidenav-responsive': {\n        title: 'Responsive sidenav',\n        component: SidenavResponsiveExample\n    },\n    'slide-toggle-configurable': {\n        title: 'Configurable slide-toggle',\n        component: SlideToggleConfigurableExample\n    },\n    'slide-toggle-forms': {\n        title: 'Slide-toggle with forms',\n        component: SlideToggleFormsExample\n    },\n    'slide-toggle-overview': {\n        title: 'Basic slide-toggles',\n        component: SlideToggleOverviewExample\n    },\n    'slider-configurable': {\n        title: 'Configurable slider',\n        component: SliderConfigurableExample\n    },\n    'slider-formatting': {\n        title: 'Slider with custom thumb label formatting.',\n        component: SliderFormattingExample\n    },\n    'slider-overview': {\n        title: 'Basic slider',\n        component: SliderOverviewExample\n    },\n    'snack-bar-component': {\n        title: 'Snack-bar with a custom component',\n        component: SnackBarComponentExample,\n        additionalFiles: [\"snack-bar-component-example-snack.html\"],\n        selectorName: 'SnackBarComponentExample, PizzaPartyComponent'\n    },\n    'snack-bar-overview': {\n        title: 'Basic snack-bar',\n        component: SnackBarOverviewExample\n    },\n    'snack-bar-position': {\n        title: 'Snack-bar with configurable position',\n        component: SnackBarPositionExample\n    },\n    'sort-overview': {\n        title: 'Sorting overview',\n        component: SortOverviewExample\n    },\n    'stepper-editable': {\n        title: 'Stepper with editable steps',\n        component: StepperEditableExample\n    },\n    'stepper-optional': {\n        title: 'Stepper with optional steps',\n        component: StepperOptionalExample\n    },\n    'stepper-overview': {\n        title: 'Stepper overview',\n        component: StepperOverviewExample\n    },\n    'stepper-vertical': {\n        title: 'Stepper vertical',\n        component: StepperVerticalExample\n    },\n    'tab-group-async': {\n        title: 'Tab group with asynchronously loading tab contents',\n        component: TabGroupAsyncExample\n    },\n    'tab-group-basic': {\n        title: 'Basic use of the tab group',\n        component: TabGroupBasicExample\n    },\n    'tab-group-custom-label': {\n        title: 'Using tabs with a custom label template',\n        component: TabGroupCustomLabelExample\n    },\n    'tab-group-dynamic-height': {\n        title: 'Tag group with dynamic height based on tab contents',\n        component: TabGroupDynamicHeightExample\n    },\n    'tab-group-dynamic': {\n        title: 'Tag group with dynamically changing tabs',\n        component: TabGroupDynamicExample\n    },\n    'tab-group-header-below': {\n        title: 'Tab group with the headers on the bottom',\n        component: TabGroupHeaderBelowExample\n    },\n    'tab-group-lazy-loaded': {\n        title: 'Tab group where the tab content is loaded lazily (when activated)',\n        component: TabGroupLazyLoadedExample\n    },\n    'tab-group-stretched': {\n        title: 'Tab group with stretched labels',\n        component: TabGroupStretchedExample\n    },\n    'tab-group-theme': {\n        title: 'Customizing the theme options on the tab group',\n        component: TabGroupThemeExample\n    },\n    'tab-nav-bar-basic': {\n        title: 'Basic use of the tab nav bar',\n        component: TabNavBarBasicExample\n    },\n    'table-basic-flex': {\n        title: 'Basic use of `<mat-table>` (uses display flex)',\n        component: TableBasicFlexExample\n    },\n    'table-basic': {\n        title: 'Basic use of `<table mat-table>`',\n        component: TableBasicExample\n    },\n    'table-dynamic-columns': {\n        title: 'Table dynamically changing the columns displayed',\n        component: TableDynamicColumnsExample\n    },\n    'table-expandable-rows': {\n        title: 'Table with expandable rows',\n        component: TableExpandableRowsExample\n    },\n    'table-filtering': {\n        title: 'Table with filtering',\n        component: TableFilteringExample\n    },\n    'table-footer-row': {\n        title: 'Footer row table',\n        component: TableFooterRowExample\n    },\n    'table-http': {\n        title: 'Table retrieving data through HTTP',\n        component: TableHttpExample\n    },\n    'table-multiple-header-footer': {\n        title: 'Table with multiple header and footer rows',\n        component: TableMultipleHeaderFooterExample\n    },\n    'table-overview': {\n        title: 'Data table with sorting, pagination, and filtering.',\n        component: TableOverviewExample\n    },\n    'table-pagination': {\n        title: 'Table with pagination',\n        component: TablePaginationExample\n    },\n    'table-row-context': {\n        title: 'Table showing each row context properties.',\n        component: TableRowContextExample\n    },\n    'table-selection': {\n        title: 'Table with selection',\n        component: TableSelectionExample\n    },\n    'table-sorting': {\n        title: 'Table with sorting',\n        component: TableSortingExample\n    },\n    'table-sticky-columns': {\n        title: 'Table with a sticky columns',\n        component: TableStickyColumnsExample\n    },\n    'table-sticky-complex-flex': {\n        title: 'Flex-layout tables with toggle-able sticky headers, footers, and columns',\n        component: TableStickyComplexFlexExample\n    },\n    'table-sticky-complex': {\n        title: 'Tables with toggle-able sticky headers, footers, and columns',\n        component: TableStickyComplexExample\n    },\n    'table-sticky-footer': {\n        title: 'Table with a sticky footer',\n        component: TableStickyFooterExample\n    },\n    'table-sticky-header': {\n        title: 'Table with sticky header',\n        component: TableStickyHeaderExample\n    },\n    'text-field-autofill-directive': {\n        title: 'Monitoring autofill state with cdkAutofill',\n        component: TextFieldAutofillDirectiveExample\n    },\n    'text-field-autofill-monitor': {\n        title: 'Monitoring autofill state with AutofillMonitor',\n        component: TextFieldAutofillMonitorExample\n    },\n    'text-field-autosize-textarea': {\n        title: 'Auto-resizing textarea',\n        component: TextFieldAutosizeTextareaExample\n    },\n    'toolbar-multirow': {\n        title: 'Multi-row toolbar',\n        component: ToolbarMultirowExample\n    },\n    'toolbar-overview': {\n        title: 'Basic toolbar',\n        component: ToolbarOverviewExample\n    },\n    'tooltip-auto-hide': {\n        title: 'Tooltip that demonstrates auto-hiding when it clips out of its scrolling container.',\n        component: TooltipAutoHideExample\n    },\n    'tooltip-custom-class': {\n        title: 'Tooltip that can have a custom class applied.',\n        component: TooltipCustomClassExample\n    },\n    'tooltip-delay': {\n        title: 'Tooltip with a show and hide delay',\n        component: TooltipDelayExample\n    },\n    'tooltip-disabled': {\n        title: 'Tooltip that can be disabled',\n        component: TooltipDisabledExample\n    },\n    'tooltip-manual': {\n        title: 'Tooltip that can be manually shown/hidden.',\n        component: TooltipManualExample\n    },\n    'tooltip-message': {\n        title: 'Tooltip with a changing message',\n        component: TooltipMessageExample\n    },\n    'tooltip-modified-defaults': {\n        title: 'Tooltip with a show and hide delay',\n        component: TooltipModifiedDefaultsExample\n    },\n    'tooltip-overview': {\n        title: 'Basic tooltip',\n        component: TooltipOverviewExample\n    },\n    'tooltip-position': {\n        title: 'Tooltip with a custom position',\n        component: TooltipPositionExample\n    },\n    'tree-checklist': {\n        title: 'Tree with checkboxes',\n        component: TreeChecklistExample\n    },\n    'tree-dynamic': {\n        title: 'Tree with dynamic data',\n        component: TreeDynamicExample\n    },\n    'tree-flat-overview': {\n        title: 'Tree with flat nodes',\n        component: TreeFlatOverviewExample\n    },\n    'tree-loadmore': {\n        title: 'Tree with partially loaded data',\n        component: TreeLoadmoreExample\n    },\n    'tree-nested-overview': {\n        title: 'Tree with nested nodes',\n        component: TreeNestedOverviewExample\n    },\n};\nvar /** @type {?} */ EXAMPLE_LIST = [\n    AutocompleteAutoActiveFirstOptionExample,\n    AutocompleteDisplayExample,\n    AutocompleteFilterExample,\n    AutocompleteOptgroupExample,\n    AutocompleteOverviewExample,\n    AutocompleteSimpleExample,\n    BadgeOverviewExample,\n    BottomSheetOverviewExampleSheet, BottomSheetOverviewExample,\n    ButtonOverviewExample,\n    ButtonToggleExclusiveExample,\n    ButtonToggleOverviewExample,\n    ButtonTypesExample,\n    CardFancyExample,\n    CardOverviewExample,\n    CdkTableBasicFlexExample,\n    CdkTableBasicExample,\n    CdkTreeFlatExample,\n    CdkTreeNestedExample,\n    CheckboxConfigurableExample,\n    CheckboxOverviewExample,\n    ChipsAutocompleteExample,\n    ChipsInputExample,\n    ChipsOverviewExample,\n    ChipsStackedExample,\n    DatepickerApiExample,\n    DatepickerColorExample,\n    ExampleHeader, DatepickerCustomHeaderExample,\n    DatepickerCustomIconExample,\n    DatepickerDisabledExample,\n    DatepickerEventsExample,\n    DatepickerFilterExample,\n    DatepickerFormatsExample,\n    DatepickerLocaleExample,\n    DatepickerMinMaxExample,\n    DatepickerMomentExample,\n    DatepickerOverviewExample,\n    DatepickerStartViewExample,\n    DatepickerTouchExample,\n    DatepickerValueExample,\n    DatepickerViewsSelectionExample,\n    DialogContentExampleDialog, DialogContentExample,\n    DialogDataExampleDialog, DialogDataExample,\n    DialogElementsExampleDialog, DialogElementsExample,\n    DialogOverviewExampleDialog, DialogOverviewExample,\n    DividerOverviewExample,\n    ElevationOverviewExample,\n    ExpansionExpandCollapseAllExample,\n    ExpansionOverviewExample,\n    ExpansionStepsExample,\n    FocusMonitorDirectivesExample,\n    FocusMonitorFocusViaExample,\n    FocusMonitorOverviewExample,\n    FormFieldAppearanceExample,\n    MyTelInput, FormFieldCustomControlExample,\n    FormFieldErrorExample,\n    FormFieldHintExample,\n    FormFieldLabelExample,\n    FormFieldOverviewExample,\n    FormFieldPrefixSuffixExample,\n    FormFieldThemingExample,\n    GridListDynamicExample,\n    GridListOverviewExample,\n    IconOverviewExample,\n    IconSvgExample,\n    InputClearableExample,\n    InputErrorStateMatcherExample,\n    InputErrorsExample,\n    InputFormExample,\n    InputHintExample,\n    InputOverviewExample,\n    InputPrefixSuffixExample,\n    ListOverviewExample,\n    ListSectionsExample,\n    ListSelectionExample,\n    MenuIconsExample,\n    MenuOverviewExample,\n    NestedMenuExample,\n    PaginatorConfigurableExample,\n    PaginatorOverviewExample,\n    ProgressBarBufferExample,\n    ProgressBarConfigurableExample,\n    ProgressBarDeterminateExample,\n    ProgressBarIndeterminateExample,\n    ProgressBarQueryExample,\n    ProgressSpinnerConfigurableExample,\n    ProgressSpinnerOverviewExample,\n    RadioNgModelExample,\n    RadioOverviewExample,\n    SelectCustomTriggerExample,\n    SelectDisabledExample,\n    SelectErrorStateMatcherExample,\n    SelectFormExample,\n    SelectHintErrorExample,\n    SelectMultipleExample,\n    SelectNoRippleExample,\n    SelectOptgroupExample,\n    SelectOverviewExample,\n    SelectPanelClassExample,\n    SelectResetExample,\n    SelectValueBindingExample,\n    SidenavAutosizeExample,\n    SidenavBackdropExample,\n    SidenavDisableCloseExample,\n    SidenavDrawerOverviewExample,\n    SidenavFixedExample,\n    SidenavModeExample,\n    SidenavOpenCloseExample,\n    SidenavOverviewExample,\n    SidenavPositionExample,\n    SidenavResponsiveExample,\n    SlideToggleConfigurableExample,\n    SlideToggleFormsExample,\n    SlideToggleOverviewExample,\n    SliderConfigurableExample,\n    SliderFormattingExample,\n    SliderOverviewExample,\n    PizzaPartyComponent, SnackBarComponentExample,\n    SnackBarOverviewExample,\n    SnackBarPositionExample,\n    SortOverviewExample,\n    StepperEditableExample,\n    StepperOptionalExample,\n    StepperOverviewExample,\n    StepperVerticalExample,\n    TabGroupAsyncExample,\n    TabGroupBasicExample,\n    TabGroupCustomLabelExample,\n    TabGroupDynamicHeightExample,\n    TabGroupDynamicExample,\n    TabGroupHeaderBelowExample,\n    TabGroupLazyLoadedExample,\n    TabGroupStretchedExample,\n    TabGroupThemeExample,\n    TabNavBarBasicExample,\n    TableBasicFlexExample,\n    TableBasicExample,\n    TableDynamicColumnsExample,\n    TableExpandableRowsExample,\n    TableFilteringExample,\n    TableFooterRowExample,\n    TableHttpExample,\n    TableMultipleHeaderFooterExample,\n    TableOverviewExample,\n    TablePaginationExample,\n    TableRowContextExample,\n    TableSelectionExample,\n    TableSortingExample,\n    TableStickyColumnsExample,\n    TableStickyComplexFlexExample,\n    TableStickyComplexExample,\n    TableStickyFooterExample,\n    TableStickyHeaderExample,\n    TextFieldAutofillDirectiveExample,\n    TextFieldAutofillMonitorExample,\n    TextFieldAutosizeTextareaExample,\n    ToolbarMultirowExample,\n    ToolbarOverviewExample,\n    TooltipAutoHideExample,\n    TooltipCustomClassExample,\n    TooltipDelayExample,\n    TooltipDisabledExample,\n    TooltipManualExample,\n    TooltipMessageExample,\n    TooltipModifiedDefaultsExample,\n    TooltipOverviewExample,\n    TooltipPositionExample,\n    TreeChecklistExample,\n    TreeDynamicExample,\n    TreeFlatOverviewExample,\n    TreeLoadmoreExample,\n    TreeNestedOverviewExample,\n];\nvar ExampleModule = /*@__PURE__*/ (function () {\n    function ExampleModule() {\n    }\n    return ExampleModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Example data\n *   with information about Component name, selector, files used in example, and path to examples\n */\nvar /**\n * Example data\n *   with information about Component name, selector, files used in example, and path to examples\n */ ExampleData = /*@__PURE__*/ (function () {\n    function ExampleData(example) {\n        if (!example || !EXAMPLE_COMPONENTS.hasOwnProperty(example)) {\n            return;\n        }\n        var /** @type {?} */ exampleConfig = EXAMPLE_COMPONENTS[example];\n        // TODO(tinayuangao): Do not hard-code extensions\n        this.exampleFiles = ['html', 'ts', 'css'].map(function (extension) { return example + \"-example.\" + extension; });\n        this.examplePath = \"/assets/stackblitz/examples/\" + example + \"/\";\n        this.selectorName = this.indexFilename = example + \"-example\";\n        if (exampleConfig.additionalFiles) {\n            (_a = this.exampleFiles).push.apply(_a, exampleConfig.additionalFiles);\n        }\n        var /** @type {?} */ exampleName = example.replace(/(?:^\\w|\\b\\w)/g, function (letter) { return letter.toUpperCase(); });\n        this.description = exampleConfig.title || exampleName.replace(/[\\-]+/g, ' ') + ' Example';\n        this.componentName = exampleConfig.selectorName ||\n            exampleName.replace(/[\\-]+/g, '') + 'Example';\n        var _a;\n    }\n    return ExampleData;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { ExampleData, EXAMPLE_COMPONENTS, EXAMPLE_LIST, ExampleModule, ListOverviewExample, DatepickerOverviewExample, CardFancyExample, ToolbarMultirowExample, ButtonToggleOverviewExample, ExpansionOverviewExample, StepperOverviewExample, AutocompleteAutoActiveFirstOptionExample as ɵa, AutocompleteDisplayExample as ɵb, AutocompleteFilterExample as ɵc, AutocompleteOptgroupExample as ɵd, AutocompleteOverviewExample as ɵe, AutocompleteSimpleExample as ɵf, BadgeOverviewExample as ɵg, BottomSheetOverviewExample as ɵh, BottomSheetOverviewExampleSheet as ɵi, ButtonOverviewExample as ɵj, ButtonToggleExclusiveExample as ɵk, ButtonTypesExample as ɵl, CardOverviewExample as ɵm, CdkTableBasicFlexExample as ɵn, CdkTableBasicExample as ɵo, CdkTreeFlatExample as ɵq, FileDatabase as ɵp, CdkTreeNestedExample as ɵs, FileDatabase$1 as ɵr, CheckboxConfigurableExample as ɵt, CheckboxOverviewExample as ɵu, ChipsAutocompleteExample as ɵv, ChipsInputExample as ɵw, ChipsOverviewExample as ɵx, ChipsStackedExample as ɵy, DatepickerApiExample as ɵz, DatepickerColorExample as ɵba, DatepickerCustomHeaderExample as ɵbb, ExampleHeader as ɵbc, DatepickerCustomIconExample as ɵbd, DatepickerDisabledExample as ɵbe, DatepickerEventsExample as ɵbf, DatepickerFilterExample as ɵbg, DatepickerFormatsExample as ɵbi, MY_FORMATS as ɵbh, DatepickerLocaleExample as ɵbj, DatepickerMinMaxExample as ɵbk, DatepickerMomentExample as ɵbl, DatepickerStartViewExample as ɵbm, DatepickerTouchExample as ɵbn, DatepickerValueExample as ɵbo, DatepickerViewsSelectionExample as ɵbq, MY_FORMATS$1 as ɵbp, DialogContentExample as ɵbr, DialogContentExampleDialog as ɵbs, DialogDataExample as ɵbt, DialogDataExampleDialog as ɵbu, DialogElementsExample as ɵbv, DialogElementsExampleDialog as ɵbw, DialogOverviewExample as ɵbx, DialogOverviewExampleDialog as ɵby, DividerOverviewExample as ɵbz, ElevationOverviewExample as ɵca, ExpansionExpandCollapseAllExample as ɵcb, ExpansionStepsExample as ɵcc, FocusMonitorDirectivesExample as ɵcd, FocusMonitorFocusViaExample as ɵce, FocusMonitorOverviewExample as ɵcf, FormFieldAppearanceExample as ɵcg, FormFieldCustomControlExample as ɵci, MyTelInput as ɵch, FormFieldErrorExample as ɵcj, FormFieldHintExample as ɵck, FormFieldLabelExample as ɵcl, FormFieldOverviewExample as ɵcm, FormFieldPrefixSuffixExample as ɵcn, FormFieldThemingExample as ɵco, GridListDynamicExample as ɵcp, GridListOverviewExample as ɵcq, IconOverviewExample as ɵcr, IconSvgExample as ɵcs, InputClearableExample as ɵct, InputErrorStateMatcherExample as ɵcu, InputErrorsExample as ɵcv, InputFormExample as ɵcw, InputHintExample as ɵcx, InputOverviewExample as ɵcy, InputPrefixSuffixExample as ɵcz, ListSectionsExample as ɵda, ListSelectionExample as ɵdb, ExampleMaterialModule as ɵha, MenuIconsExample as ɵdc, MenuOverviewExample as ɵdd, NestedMenuExample as ɵde, PaginatorConfigurableExample as ɵdf, PaginatorOverviewExample as ɵdg, ProgressBarBufferExample as ɵdh, ProgressBarConfigurableExample as ɵdi, ProgressBarDeterminateExample as ɵdj, ProgressBarIndeterminateExample as ɵdk, ProgressBarQueryExample as ɵdl, ProgressSpinnerConfigurableExample as ɵdm, ProgressSpinnerOverviewExample as ɵdn, RadioNgModelExample as ɵdo, RadioOverviewExample as ɵdp, SelectCustomTriggerExample as ɵdq, SelectDisabledExample as ɵdr, SelectErrorStateMatcherExample as ɵds, SelectFormExample as ɵdt, SelectHintErrorExample as ɵdu, SelectMultipleExample as ɵdv, SelectNoRippleExample as ɵdw, SelectOptgroupExample as ɵdx, SelectOverviewExample as ɵdy, SelectPanelClassExample as ɵdz, SelectResetExample as ɵea, SelectValueBindingExample as ɵeb, SidenavAutosizeExample as ɵec, SidenavBackdropExample as ɵed, SidenavDisableCloseExample as ɵee, SidenavDrawerOverviewExample as ɵef, SidenavFixedExample as ɵeg, SidenavModeExample as ɵeh, SidenavOpenCloseExample as ɵei, SidenavOverviewExample as ɵej, SidenavPositionExample as ɵek, SidenavResponsiveExample as ɵel, SlideToggleConfigurableExample as ɵem, SlideToggleFormsExample as ɵen, SlideToggleOverviewExample as ɵeo, SliderConfigurableExample as ɵep, SliderFormattingExample as ɵeq, SliderOverviewExample as ɵer, PizzaPartyComponent as ɵet, SnackBarComponentExample as ɵes, SnackBarOverviewExample as ɵeu, SnackBarPositionExample as ɵev, SortOverviewExample as ɵew, StepperEditableExample as ɵex, StepperOptionalExample as ɵey, StepperVerticalExample as ɵez, TabGroupAsyncExample as ɵfa, TabGroupBasicExample as ɵfb, TabGroupCustomLabelExample as ɵfc, TabGroupDynamicHeightExample as ɵfd, TabGroupDynamicExample as ɵfe, TabGroupHeaderBelowExample as ɵff, TabGroupLazyLoadedExample as ɵfg, TabGroupStretchedExample as ɵfh, TabGroupThemeExample as ɵfi, TabNavBarBasicExample as ɵfj, TableBasicFlexExample as ɵfk, TableBasicExample as ɵfl, TableDynamicColumnsExample as ɵfm, TableExpandableRowsExample as ɵfn, TableFilteringExample as ɵfo, TableFooterRowExample as ɵfp, TableHttpExample as ɵfq, TableMultipleHeaderFooterExample as ɵfr, TableOverviewExample as ɵfs, TablePaginationExample as ɵft, TableRowContextExample as ɵfu, TableSelectionExample as ɵfv, TableSortingExample as ɵfw, TableStickyColumnsExample as ɵfx, TableStickyComplexFlexExample as ɵfy, TableStickyComplexExample as ɵfz, TableStickyFooterExample as ɵga, TableStickyHeaderExample as ɵgb, TextFieldAutofillDirectiveExample as ɵgc, TextFieldAutofillMonitorExample as ɵgd, TextFieldAutosizeTextareaExample as ɵge, ToolbarOverviewExample as ɵgf, TooltipAutoHideExample as ɵgg, TooltipCustomClassExample as ɵgh, TooltipDelayExample as ɵgi, TooltipDisabledExample as ɵgj, TooltipManualExample as ɵgk, TooltipMessageExample as ɵgl, TooltipModifiedDefaultsExample as ɵgn, myCustomTooltipDefaults as ɵgm, TooltipOverviewExample as ɵgo, TooltipPositionExample as ɵgp, ChecklistDatabase as ɵgq, TreeChecklistExample as ɵgr, DynamicDatabase as ɵgs, TreeDynamicExample as ɵgt, FileDatabase$2 as ɵgu, TreeFlatOverviewExample as ɵgv, LoadmoreDatabase as ɵgw, TreeLoadmoreExample as ɵgx, FileDatabase$3 as ɵgy, TreeNestedOverviewExample as ɵgz };\n//# sourceMappingURL=material-examples.es5.js.map\n",null]}